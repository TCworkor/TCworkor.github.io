<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>TCworker • Posts by &#34;理论知识&#34; category</title>
        <link>http://example.com</link>
        <description>time to work</description>
        <language>zh-CN</language>
        <pubDate>Thu, 24 Nov 2022 23:51:02 +0800</pubDate>
        <lastBuildDate>Thu, 24 Nov 2022 23:51:02 +0800</lastBuildDate>
        <category>csapp</category>
        <category>闲暇</category>
        <category>Linux</category>
        <category>图床</category>
        <category>Typroa</category>
        <category>blog</category>
        <category>hexo</category>
        <category>python</category>
        <category>pwn</category>
        <category>指针</category>
        <category>C语言</category>
        <item>
            <guid isPermalink="true">http://example.com/2022/11/24/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88(1)/</guid>
            <title>C语言指针(1)</title>
            <link>http://example.com/2022/11/24/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88(1)/</link>
            <category>指针</category>
            <category>C语言</category>
            <pubDate>Thu, 24 Nov 2022 23:51:02 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;一指针简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一指针简介&#34;&gt;#&lt;/a&gt; 一。指针简介&lt;/h2&gt;
&lt;p&gt;指针是  &lt;code&gt;C&lt;/code&gt;  语言的灵魂，它不仅仅是 C 语言中的一个重要概念及其特点，也是 C 语言比较困难的部分。指针也就是 &lt;code&gt;内存地址&lt;/code&gt; ，指针变量是用来&lt;u&gt;存放&lt;strong&gt;内存地址&lt;/strong&gt;的变量&lt;/u&gt;，不同类型的指针变量所占用的存储单元长度是&lt;strong&gt;相同的&lt;/strong&gt; (毕竟只是一个地址)，而存放数据的变量因数据的类型不同，所占用的存储空间长度也&lt;strong&gt;不同&lt;/strong&gt;。【其实就像酒店的房间，房间的 &lt;mark&gt;&lt;strong&gt;门牌号&lt;/strong&gt;&lt;/mark&gt; (指针 \ &lt;u&gt;内存地址&lt;/u&gt;) 可以都是三位数 如 803 .  012，但是 &lt;mark&gt;&lt;strong&gt;房间类型&lt;/strong&gt;&lt;/mark&gt; (不同数据类型的&lt;u&gt;储存空间长度&lt;/u&gt;) 可以随着住户的需求而改变，像 单人间 ， 双人间 ，杂物间？】&lt;/p&gt;
&lt;p&gt;合理的使用指针可以提高效率。&lt;/p&gt;
&lt;p&gt;合理的使用指针可以提高灵活度。&lt;/p&gt;
&lt;p&gt;不合理的使用指针就会大 (吉) 寄大 (利) 历；&lt;/p&gt;
&lt;p&gt;因为指针是一把&lt;mark&gt;双刃剑&lt;/mark&gt;，如果对指针不能正确理解和灵活有效的应用，利用指针编写的程序也很容易发生各式各样的错误，同时程序的可读性也会大打折扣。所以指针的使用，不是 &lt;strong&gt;吉&lt;/strong&gt;，就是 &lt;strong&gt;寄&lt;/strong&gt;。至于是吉还是寄，就看诸位的功底了。}&lt;/p&gt;
&lt;h3 id=&#34;1内存&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1内存&#34;&gt;#&lt;/a&gt; 1. 内存&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;C&lt;/code&gt;  语言所有的变量都存放在内存中，每个人都有它的归宿， 而各种变量如 int ,char … ，它们的归宿就是内存，总之嘛，&lt;strong&gt;内存作为容器用来存放变量&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;2内存地址&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2内存地址&#34;&gt;#&lt;/a&gt; 2. 内存地址&lt;/h3&gt;
&lt;p&gt;内存地址就好比一个人的身份证，每个人的身份证都是唯一的，&lt;strong&gt;内存地址也是唯一的&lt;/strong&gt;，可以通过唯一的内存地址，找到唯一的内存数据。&lt;/p&gt;
&lt;h3 id=&#34;3指针声明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3指针声明&#34;&gt;#&lt;/a&gt; 3. 指针声明&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;指针&lt;/code&gt; 也是  &lt;code&gt;C&lt;/code&gt;  语言中变量的一种，其值为一个 &lt;strong&gt;变量&lt;/strong&gt; 的地址，即内存位置的直接地址。指针变量声明的一般形式为：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202211232327103.jpeg&#34; alt=&#34;网页捕获_23-11-2022_231934_www.jianshu.com&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：请不要忘记在指针类型和变量名中间有一个  &lt;code&gt;*&lt;/code&gt;  号哦，没有这个  &lt;code&gt;*&lt;/code&gt;  号的话，只是定义了一个普通变量，这也是普通变量声明和指针声明的区别之一；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202211232331683.jpeg&#34; alt=&#34;网页捕获_23-11-2022_23208_www.jianshu.com&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;二指针类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二指针类型&#34;&gt;#&lt;/a&gt; 二。指针类型&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;指针很灵活，它可以指向任意类型的数据。 &lt;code&gt;指针&lt;/code&gt; 的类型说明了它所指向  &lt;u&gt;地址空间 &lt;/u&gt; 的内存&lt;/strong&gt;，以下是有效的指针声明：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202211232333259.jpeg&#34; alt=&#34;网页捕获_23-11-2022_232038_www.jianshu.com&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;三声明并初始化一个指针&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三声明并初始化一个指针&#34;&gt;#&lt;/a&gt; 三。声明并初始化一个指针&lt;/h2&gt;
&lt;h3 id=&#34;1声明指针并直接初始化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1声明指针并直接初始化&#34;&gt;#&lt;/a&gt; 1. 声明指针并直接初始化&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202211232334098.jpeg&#34; alt=&#34;网页捕获_23-11-2022_23212_www.jianshu.com&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2先声明指针再初始化最好不要这样-_-&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2先声明指针再初始化最好不要这样-_-&#34;&gt;#&lt;/a&gt; 2. 先声明指针再初始化 (最好不要这样 - _ -)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;在 &lt;code&gt;C&lt;/code&gt;  语言中，定义局部变量时如果未初始化，那么它的值将会是随机的；而全局变量 、静态变量初始值为  &lt;code&gt;0&lt;/code&gt;  ；所以如果你不想你的程序有炸掉的风险的话，请  &lt;mark&gt;声明指针并直接初始化&lt;/mark&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;四查看指针地址和指针的值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四查看指针地址和指针的值&#34;&gt;#&lt;/a&gt; 四。查看指针地址和指针的值&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;指针&lt;/code&gt; 的占位符则是用  &lt;code&gt;%p&lt;/code&gt;  或者  &lt;code&gt;%x&lt;/code&gt;  (x 并不是 x) 表示，具体使用参考下面例子：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202211232341430.jpeg&#34; alt=&#34;网页捕获_23-11-2022_232258_www.jianshu.com&#34;&gt;&lt;/p&gt;
&lt;p&gt;在如上例子中：声明了一个整形变量  &lt;code&gt;iValue&lt;/code&gt;  ，并使用指针  &lt;code&gt;pValue&lt;/code&gt;  执行整形变量  &lt;code&gt;iValue&lt;/code&gt;  ，根据输出的信息可以得到结论：&lt;strong&gt;&lt;u&gt;两者的内存地址都一样&lt;/u&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;由于整形变量  &lt;code&gt;iValue&lt;/code&gt;  指针变量  &lt;code&gt;pValue&lt;/code&gt;  内存地址一样，整形变量  &lt;code&gt;iValue&lt;/code&gt;  的值发生变化后指针  &lt;code&gt;pValue&lt;/code&gt;  也会跟着一起变化 (所以好像会互相影响呢)，指针  &lt;code&gt;pValue&lt;/code&gt;  的值发生变化后整形变量  &lt;code&gt;iValue&lt;/code&gt;  的值也会跟着一起变化，两者本来就是 ==&lt;u&gt;同一个&lt;/u&gt;==，&lt;/strong&gt; 就好比既可以通过&lt;mark&gt;名字&lt;/mark&gt;来找到你，也可以通过&lt;mark&gt;身份证号码&lt;/mark&gt;来找到你。&lt;/p&gt;
&lt;h2 id=&#34;五null-指针-空指针&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五null-指针-空指针&#34;&gt;#&lt;/a&gt; 五.NULL 指针 – 空指针&lt;/h2&gt;
&lt;p&gt;在变量声明的时候，如果没有确切的地址可以赋值，为指针变量赋一个  &lt;code&gt;NULL&lt;/code&gt;  值，赋为  &lt;code&gt;NULL&lt;/code&gt;  值的指针被称为 == &lt;code&gt;空指针&lt;/code&gt;  ==。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;NULL&lt;/code&gt;  指针是一个定义在标准库中的值为零的常量&lt;/strong&gt;。请看下面的程序：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202211232348261.jpeg&#34; alt=&#34;网页捕获_23-11-2022_232357_www.jianshu.com&#34;&gt;&lt;/p&gt;
&lt;p&gt;在大多数的操作系统上，程序是不允许用户访问&lt;u&gt;地址为 0&lt;/u&gt; 的内存，&lt;u&gt;因为该内存是操作系统保留的&lt;/u&gt;。然而，内存地址 0 有&lt;mark&gt;特别重要的意义&lt;/mark&gt;，它表明该指针&lt;u&gt;不指向一个可访问的内存位置&lt;/u&gt;。但按照惯例，如果指针包含 &lt;strong&gt;空值&lt;/strong&gt;（零值），&lt;u&gt;则假定它不指向任何东西&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;如需检查一个空指针，您可以使用 &lt;code&gt;if&lt;/code&gt;  语句，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202211232352132.jpeg&#34; alt=&#34;网页捕获_23-11-2022_232423_www.jianshu.com&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;六重点总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#六重点总结&#34;&gt;#&lt;/a&gt; 六。重点总结&lt;/h2&gt;
&lt;p&gt;1. 指针作为一个变量，拥有自己的地址，占位符使用 &lt;code&gt;%p&lt;/code&gt;  或者 &lt;code&gt; %x&lt;/code&gt; ；&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202211232354862.jpeg&#34; alt=&#34;网页捕获_23-11-2022_232446_www.jianshu.com&#34;&gt;&lt;/p&gt;
&lt;p&gt;2. 取指针的值需要在指针变量前面加上  &lt;code&gt;*&lt;/code&gt;  ，否则是取指针的地址；&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202211232359851.jpeg&#34; alt=&#34;网页捕获_23-11-2022_232510_www.jianshu.com&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;` 部分图片来自网络&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/30/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3python%E8%AF%AD%E8%A8%80[%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B]/</guid>
            <title>深入理解python语言[基本数据类型]</title>
            <link>http://example.com/2022/10/30/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3python%E8%AF%AD%E8%A8%80[%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B]/</link>
            <category>python</category>
            <pubDate>Sun, 30 Oct 2022 16:33:19 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;深入理解python语言基本数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#深入理解python语言基本数据类型&#34;&gt;#&lt;/a&gt; 深入理解 python 语言 [基本数据类型]&lt;/h1&gt;
&lt;h2 id=&#34;1整数类型与数学中整数的概念一致&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1整数类型与数学中整数的概念一致&#34;&gt;#&lt;/a&gt; 1. 整数类型（与数学中整数的概念一致）&lt;/h2&gt;
&lt;p&gt;—  可正可负，&lt;strong&gt;没有取值范围的限制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;—  pow (x,y) : 计算 x&lt;sup&gt;y&lt;/sup&gt;, 不限制计算的大小【C 语言也有 pow ()】&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; pow(2,100)&lt;/p&gt;
&lt;p&gt;//python 整数提供&lt;u&gt;四种&lt;/u&gt;进制表现形式：十进制，二进制，八进制，十六进制 //&lt;/p&gt;
&lt;h2 id=&#34;2浮点数类型与数学中实数的概念一致&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2浮点数类型与数学中实数的概念一致&#34;&gt;#&lt;/a&gt; 2. 浮点数类型（与数学中实数的概念一致）&lt;/h2&gt;
&lt;p&gt;—  带有小数点及小数的数字&lt;/p&gt;
&lt;p&gt;—  浮点数取值范围和小数精度存在限制，但常规计算可以忽略&lt;/p&gt;
&lt;p&gt;—  取值范围数量级约 - 10&lt;sup&gt;308&lt;/sup&gt; 至 10&lt;sup&gt;308&lt;/sup&gt; (比 C 语言大多了), 精度数量级 10&lt;sup&gt;-16&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;—  &lt;strong&gt;浮点数间运算和比较用 &lt;code&gt;round()&lt;/code&gt;  函数辅助&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;// 浮点数间的运算存在不确定尾数（我才知道这在很多编程语言中都存在 —__—）//&lt;/p&gt;
&lt;p&gt;例题：&amp;gt;&amp;gt;&amp;gt; 0.1+0.2 == 0.3&lt;/p&gt;
&lt;p&gt;False (就是会这样)&lt;/p&gt;
&lt;p&gt;可以使用 round 函数&lt;/p&gt;
&lt;p&gt;—   round (x,d) : 对 x 四舍五入，d 是小数的解取位数（本题 d=1，四舍五入到 0.1，便可以成立）&lt;/p&gt;
&lt;p&gt;&lt;u&gt;&lt;strong&gt; &lt;code&gt;浮点数可以采用科学计数法表示&lt;/code&gt; &lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;—   使用字母 e 或者 E 作为幂的符号，以 10 为基数，格式如下：&lt;/p&gt;
&lt;p&gt;&lt;a&gt;e&lt;b&gt;      表示 a*10&lt;sup&gt;b&lt;/sup&gt;&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;—   例如：4.3e-3==0.0043       9.6E5==960000.0&lt;/p&gt;
&lt;h2 id=&#34;3复数类型与数学中的复数概念一致&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3复数类型与数学中的复数概念一致&#34;&gt;#&lt;/a&gt; 3. 复数类型 (与数学中的复数概念一致)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;mark&gt;众多编程语言中，只有 python 提供复数类型&lt;/mark&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;—  定义     &lt;strong&gt;&lt;mark&gt;j&lt;/mark&gt;&lt;/strong&gt;=(-1)&lt;sup&gt;0.5&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;—   a+b==&lt;strong&gt;j&lt;/strong&gt;== 被称为复数，其中，a 为实部，b 为虚部&lt;/p&gt;
&lt;p&gt;例题：&lt;/p&gt;
&lt;p&gt;z = 1.23e - 4 + 5.6e + 89&lt;strong&gt;j&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;—  实部是什么？   z.real 获得实部&lt;/p&gt;
&lt;p&gt;—  虚部是什么？   z.imag 获得虚部&lt;/p&gt;
&lt;p&gt;// 在常规的计算机编程中很少使用 //&lt;/p&gt;
&lt;h2 id=&#34;4数值运算操作符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4数值运算操作符&#34;&gt;#&lt;/a&gt; 4. 数值运算操作符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;x+y   [加，x 与 y 的和]&lt;/li&gt;
&lt;li&gt;x-y    [减，x 与 y 的差]&lt;/li&gt;
&lt;li&gt;x*y   [乘，x 与 y 的积]&lt;/li&gt;
&lt;li&gt;x/y    [除，x 与 y 的商   10/3=3.3333333333333333335]&lt;/li&gt;
&lt;li&gt;x//y   [整数除，x 与 y 的整数商    10//3=3]&lt;/li&gt;
&lt;li&gt;+x      [x 本身]&lt;/li&gt;
&lt;li&gt;-y       [y 的负值]&lt;/li&gt;
&lt;li&gt;x% y   [余数，模运算  10%3 的结果是 1]&lt;/li&gt;
&lt;li&gt;x**y  [幂运算，x 的 y 次幂，x&lt;sup&gt;y&lt;/sup&gt;|| 当 y 是小数时，开方运算  10**0.5 的结果是 10&lt;sup&gt;0.5&lt;/sup&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;u&gt;&lt;strong&gt; &lt;code&gt;二元操作符对应的增强赋值操作符&lt;/code&gt; &lt;/strong&gt;&lt;/u&gt;(类似于 C 语言的赋值操作)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210302100493.jpeg&#34; alt=&#34;网页捕获_30-10-2022_2102_www.icourse163.org&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt; &lt;code&gt;不同数字类型间可以进行混合运算，生成结果“最宽”的类型&lt;/code&gt; &lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;— 三种类型存在一种逐渐 “扩展” 或 “变宽” 的关系：&lt;/p&gt;
&lt;p&gt;整数   -&amp;gt;   浮点数   -&amp;gt;   复数&lt;/p&gt;
&lt;p&gt;— 例如：123 + 4.0 =127.0 (整数 + 浮点数 = 浮点数)&lt;/p&gt;
&lt;h2 id=&#34;5数值运算函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5数值运算函数&#34;&gt;#&lt;/a&gt; 5. 数值运算函数&lt;/h2&gt;
&lt;p&gt;&lt;u&gt;python 内置一些函数&lt;/u&gt;(不得不说，python 跟 C 比起来真的是强了十倍甚至是九倍)@_@-!&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210302114974.jpeg&#34; alt=&#34;网页捕获_30-10-2022_211426_www.icourse163.org&#34;&gt;&lt;/p&gt;
&lt;p&gt;=======================================================================================================================================================================================================================================================================================================================================================================================================&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210302119261.jpeg&#34; alt=&#34;网页捕获_30-10-2022_211846_www.icourse163.org&#34;&gt;&lt;/p&gt;
&lt;p&gt;=======================================================================================================================================================================================================================================================================================================================================================================================================&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210302121832.jpeg&#34; alt=&#34;网页捕获_30-10-2022_212114_www.icourse163.org&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/12/csapp%E7%AC%ACll%E7%AB%A0/</guid>
            <title>csapp第二章</title>
            <link>http://example.com/2022/10/12/csapp%E7%AC%ACll%E7%AB%A0/</link>
            <category>csapp</category>
            <pubDate>Wed, 12 Oct 2022 19:07:35 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;csapp第二章可能没什么帮助就随便看看吧&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#csapp第二章可能没什么帮助就随便看看吧&#34;&gt;#&lt;/a&gt; csapp 第二章（可能没什么帮助，就随便看看吧）&lt;/h1&gt;
&lt;p&gt;（现代计算机以二进制存储信息。相较于十进制，它能更好的适配计算机，能够更可靠的进行信息的表示、存储传输；用不同的位组合来表示元素；三种重要的数字编码：&lt;u&gt;无符号编码&lt;/u&gt;，&lt;u&gt;二进制补码&lt;/u&gt;，&lt;u&gt;浮点数编码&lt;/u&gt;；）&lt;/p&gt;
&lt;h1 id=&#34;21信息存储&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#21信息存储&#34;&gt;#&lt;/a&gt; 2.1 信息存储&lt;/h1&gt;
&lt;p&gt;1. 字节（byte）是&lt;strong&gt; 8 位&lt;/strong&gt;的块，&lt;u&gt;作为最小的可寻址的存储器单位&lt;/u&gt;&amp;lt;而不是单独的位&amp;gt;.&lt;/p&gt;
&lt;p&gt;2. 存储器中每个字节由一个惟一的数字标识，这称之为他的&lt;u&gt;地址&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;3. 所有可能地址的集合，称为&lt;u&gt;虚拟地址空间&lt;/u&gt;。&amp;lt;像一个分好类别的仓库吧？&amp;gt;&lt;/p&gt;
&lt;p&gt;4. 编译和运行时，系统将存储空间划分为更可管理的单元，来存放不同程序对象（程序数据、指令和控制信息）。&amp;lt;分类存放，便于之后的管理与取用&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;211十六进制表示法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#211十六进制表示法&#34;&gt;#&lt;/a&gt; 2.1.1 十六进制表示法&lt;/h2&gt;
&lt;p&gt;因为二进制表示太冗长，而十进制与位模式的互相转化很麻烦，两种符号表示法都比较麻烦。所以采取 16 进制来书写位模式。编写机械级程序常常需要手工地进行十、二、十六之间的转换。&lt;u&gt;需要掌握进制之间的转化方法&lt;/u&gt;。&lt;/p&gt;
&lt;h2 id=&#34;212-字&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#212-字&#34;&gt;#&lt;/a&gt; 2.1.2 字&lt;/h2&gt;
&lt;p&gt;每台计算机都有一个字长（world size），指明整数和指针数据的标称大小（normal size）。&lt;strong&gt;字长 决定虚拟地址的最大大小&lt;/strong&gt;。&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxNDAyNDc1L2FydGljbGUvZGV0YWlscy8xMjQ4MDk5MjE=&#34;&gt;字长是什么&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;213-数据大小&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#213-数据大小&#34;&gt;#&lt;/a&gt; 2.1.3 数据大小&lt;/h2&gt;
&lt;p&gt;计算机和编译器用不同方式来编码数字，如不同长度的整数和浮点数，从而支持多种数字格式。（程序员应该提高他们编写程序的可移植性，就是说，使得程序对不同数据类型的准确大小不敏感）&amp;lt;就是可以在其他设备，其他系统上运行？&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;214寻址和字节顺序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#214寻址和字节顺序&#34;&gt;#&lt;/a&gt; 2.14 寻址和字节顺序&lt;/h2&gt;
&lt;p&gt;对于跨越多字节的程序对象，要建立两个规则：1. 对象地址是什么；2. 在存储器中如何对这些字节排序。几乎所有机器，&lt;u&gt;多字节对象都被存储为连续的字节序列，对象的地址为&lt;strong&gt;所使用字节序列中的最小地址&lt;/strong&gt;。&lt;/u&gt;（越小越精确，要找到对象的精确地址？）&lt;/p&gt;
&lt;h2 id=&#34;215-表示字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#215-表示字符串&#34;&gt;#&lt;/a&gt; 2.15 表示字符串&lt;/h2&gt;
&lt;p&gt;字符串被编码为一个&lt;strong&gt;以 null（其值）字符结尾&lt;/strong&gt;的字符数组。每个字符由标准码表示，常用 ASCII 字符码。（&lt;u&gt;文本数据比二进制数据具有更强的平台独立性&lt;/u&gt;）&amp;lt;不是特别理解・-・&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;216-表示代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#216-表示代码&#34;&gt;#&lt;/a&gt; 2.1.6 表示代码&lt;/h2&gt;
&lt;p&gt;多数情况下，&lt;u&gt;不同机器类型使用不同且不兼容的指令和编码方式。&lt;/u&gt;二进制代码很少能在不同机器和操作系统组合之间移植。&lt;/p&gt;
&lt;h2 id=&#34;217-布尔代数和环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#217-布尔代数和环&#34;&gt;#&lt;/a&gt; 2.1.7 布尔代数和环&lt;/h2&gt;
&lt;p&gt;因为二进制是计算机编码、存储和操作信息的核心，所以围绕数值 0 和 1 已经演化出了丰富的数学知识体系。（I compeletly don’t understand what it wants telling me）&lt;/p&gt;
&lt;h2 id=&#34;218-c中的位级运算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#218-c中的位级运算&#34;&gt;#&lt;/a&gt; 2.1.8  C 中的位级运算&lt;/h2&gt;
&lt;p&gt;C 的一个很有用的特性就是它是支持按位布尔运算，在布尔运算中使用的那些符号就是在 C 中使用的。（&lt;u&gt;确定一个位级表达式的结果的最好的方法就是将十六进制参数扩展成他们的二进制表示，执行二进制运算，然后再转换为十六进制。&amp;lt;/u）&lt;/p&gt;
&lt;h2 id=&#34;219-c中的逻辑运算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#219-c中的逻辑运算&#34;&gt;#&lt;/a&gt; 2.1.9   C 中的逻辑运算&lt;/h2&gt;
&lt;p 逻辑运算认为所有非零参数都表示true，而参数零表示false=&#34;&#34;&gt;C 中提供了一系列的逻辑运算符，但逻辑运算容易与位级运算相混淆，而他们的功能又是完全不同的。&lt;/p&gt;
&lt;h2 id=&#34;2110-c中的移位运算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2110-c中的移位运算&#34;&gt;#&lt;/a&gt; 2.1.10  C 中的移位运算&lt;/h2&gt;
&lt;p&gt;C 提供了一系列的移位运算，有向左或向右移位模式。（移动后要用 0 进行补位）&lt;/p&gt;
&lt;h1 id=&#34;22-整数表示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#22-整数表示&#34;&gt;#&lt;/a&gt; 2.2 整数表示&lt;/h1&gt;
&lt;h2 id=&#34;221整型数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#221整型数据类型&#34;&gt;#&lt;/a&gt; 2.2.1 整型数据类型&lt;/h2&gt;
&lt;p&gt;C 支持多种整型数据类型 —— 表示有限范围的整数。如 char、short、int、、long。C 标准定义了每种数据类型必须能够表示的最小值范围。具体而言，数据类型的取值会有差异。&lt;/p&gt;
&lt;h2 id=&#34;222无符号和二进制补码编码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#222无符号和二进制补码编码&#34;&gt;#&lt;/a&gt; 2.2.2 无符号和二进制补码编码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;二进制的补码范围是不对称的，容易产生错误。&lt;/li&gt;
&lt;li&gt;最大无符号值刚好比二进制补码的最大值的两倍大一（1）点。&lt;/li&gt;
&lt;li&gt;尽管 C 的标准没有要求用二进制补码形式来表示有符号整数，但几乎所有机器都是这么的。&lt;/li&gt;
&lt;li&gt;对有符号数，其最高有效位也称为符号位（sign bit），0 为正，1 为负。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;223有符号数和无符号数之间的转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#223有符号数和无符号数之间的转换&#34;&gt;#&lt;/a&gt; 2.2.3 有符号数和无符号数之间的转换&lt;/h2&gt;
&lt;p&gt;依托两者之间的映射关系进行转换，具体方法如有需要：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aGlkYW8uYmFpZHUuY29tL3F1ZXN0aW9uLzUxMjk3MjAwLmh0bWw=&#34;&gt;有符号数如何与无符号数转换&lt;/span&gt;                    &amp;lt;用 ctrl + 点击&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;224-c中的有符号与无符号数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#224-c中的有符号与无符号数&#34;&gt;#&lt;/a&gt; 2.2.4 C 中的有符号与无符号数&lt;/h2&gt;
&lt;p&gt;C 支持所有整数数据类型的有符号与无符号运算。尽管 C 标准没有指定某种有符号数的表示，但几乎所有机器都使用二进制补码。通常，大多数数字都是默认有符号的。（另外，当一种类型的表达式被赋值给另一种类型的变量时，转换是隐式发生的）&lt;/p&gt;
&lt;p&gt;当执行一个运算时，如果它的一个运算数是有符号而另一个是无符号，那么 C 将有符号参数类型转换为无符号数，并假设两数非负，并执行。（于一些情况下会导致运算错误）&lt;/p&gt;
&lt;h2 id=&#34;225扩展一个数字的位表示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#225扩展一个数字的位表示&#34;&gt;#&lt;/a&gt; 2.2.5 扩展一个数字的位表示&lt;/h2&gt;
&lt;p&gt;一个常见的运算是在不同字长的整数之间转换，同时保持数值不变。而当目标类型太小了，则转换可能失效，但从较小到较大，应该总可能的。（*&lt;em&gt; 将一个无符号数转换为一个更大的数据类型，只要简单的在表示的开头添加 0，这种运算被称为零扩展（zero extension）；要将一个二进制补码数字转换俄日一个更大的数据类型，规则是执行一个符号扩展（sign extension），在表示中添加最高有效位的值）。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;从一个数据大小到另一个数据大小，以及&lt;u&gt;无符号和有符号数字之间的转换的相对顺序&lt;/u&gt;能够影响一个程序的行为。&lt;/p&gt;
&lt;h2 id=&#34;226-截断数字&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#226-截断数字&#34;&gt;#&lt;/a&gt; 2.2.6 截断数字&lt;/h2&gt;
&lt;p&gt;详见：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpcGFucGFuOTAwNzIxL2FydGljbGUvZGV0YWlscy8xMjA4MDQ0MTc=&#34;&gt;截断数字&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;227有符号数和无符号数的建议&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#227有符号数和无符号数的建议&#34;&gt;#&lt;/a&gt; 2.2.7 有符号数和无符号数的建议&lt;/h2&gt;
&lt;p&gt;1. 尽量不要在你的代码中使用无符号数，以免增加不必需要的复杂性。&lt;/p&gt;
&lt;p&gt;2. 尽量使用像 int 那样的有符号类型，这样在涉及升级混合类型的复杂细节时，不必担心边界情况。&lt;/p&gt;
&lt;p&gt;3. 只有在使用位段和二进制掩码时，才可以用无符号数。应该在表达式中使用强制类型转换，使操作数均为有符号或无符号数，这样就不必由编译器来选择结果的类型。&lt;/p&gt;
&lt;h1 id=&#34;23-整数运算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23-整数运算&#34;&gt;#&lt;/a&gt; 2.3 整数运算&lt;/h1&gt;
&lt;h2 id=&#34;231无符号加法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#231无符号加法&#34;&gt;#&lt;/a&gt; 2.3.1 无符号加法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;要想完整地表示运算结果，不能对字长做任何限制。&lt;/li&gt;
&lt;li&gt;常见的编程语言支持固定精度的运算，因此 “加法” 和 “乘法” 这样的运算不同于它们在整数上的相应运算。&lt;/li&gt;
&lt;li&gt;无符号运算可视作一种形式的模运算。&lt;/li&gt;
&lt;li&gt;&lt;u&gt;&lt;strong&gt;算术运算溢出&lt;/strong&gt;&lt;/u&gt;，是指完整的整数结果不能放到数据类型的字长限制中。（&lt;u&gt;执行 C 程序时，不会将溢出作为错误而发出信号&lt;/u&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;232二进制补码加法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#232二进制补码加法&#34;&gt;#&lt;/a&gt; 2.3.2 二进制补码加法&lt;/h2&gt;
&lt;p&gt;与无符号加法有相似之处，详见导引。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1p3bl8yMjMvYXJ0aWNsZS9kZXRhaWxzLzEyMDE2ODc5OA==&#34;&gt;1 号导引&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhhbmdzaGlsb25nLmNuL3dvcmsvMjYwNTk1Lmh0bWw=&#34;&gt;2 号导引&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;233-二进制补码的非&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#233-二进制补码的非&#34;&gt;#&lt;/a&gt; 2.3.3 二进制补码的非&lt;/h2&gt;
&lt;p&gt;一种有名的用来执行位级二进制补码的非（negation）的 技术是对每个位取反（或取补），然后将结果加一。（以后还请回看 csapp   &amp;gt;_&amp;lt;）&lt;/p&gt;
&lt;h2 id=&#34;234无符号乘法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#234无符号乘法&#34;&gt;#&lt;/a&gt; 2.3.4 无符号乘法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;0*0=0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;0*1=0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1*0=0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1*1=1&lt;/p&gt;
&lt;p&gt;二进制乘法相似于十进制乘法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;235二进制补码乘法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#235二进制补码乘法&#34;&gt;#&lt;/a&gt; 2.3.5 二进制补码乘法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;补码 * 补码 = 补码（什么哦 *^*）&lt;/li&gt;
&lt;li&gt;1、无符号数 * 无符号数 = 无符号数&lt;br&gt;
 2、无符号数 * 有符号数 = 有符号数&lt;br&gt;
 3、有符号数 * 无符号数 = 有符号数&lt;br&gt;
 4、有符号数 * 有符号数 = 有符号数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;236与237-乘除2的幂&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#236与237-乘除2的幂&#34;&gt;#&lt;/a&gt; 2.3.6 与 2.3.7  乘除 2 的幂&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B1bXBpL2FydGljbGUvZGV0YWlscy8xMDQ0OTc1Mjk=&#34;&gt;计算 2 的幂的解方法&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZ2RqZHNqaC9wLzUwMzc2NzMuaHRtbCM6fjp0ZXh0PSVFNSU5QyVBOCVFNSVBNCVBNyVFNSVBNCU5QSVFNiU5NSVCMCVFNyU5QSU4NCVFNiU5QyVCQSVFNSU5OSVBOCVFNCVCOCVBRCVFRiVCQyU4QyVFOSU5OSVBNCVFNiVCMyU5NSVFOCVBNiU4MSVFNiVBRiU5NCVFNCVCOSU5OCVFNiVCMyU5NSVFOCVCRiU5OCVFNiU5QyU4OSVFNSU4QSVBMCVFNiVCMyU5NSVFOCVCRiU5OSVFNCVCQSU5Qg==&#34;&gt;具体解释 1&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDQ0NjI1Mi9hcnRpY2xlL2RldGFpbHMvMTA5MzgwMDEx&#34;&gt;通过位运算来进行 2 的幂运算&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;24浮点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#24浮点&#34;&gt;#&lt;/a&gt; 2.4 浮点&lt;/h1&gt;
&lt;p&gt;用于精确的计算，提高运算精度。&lt;/p&gt;
&lt;h2 id=&#34;241-二进制小数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#241-二进制小数&#34;&gt;#&lt;/a&gt; 2.4.1  二进制小数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;与十进制类似，用科学计数法表示（以 2 作指数底数）。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分为整数与小数两个部分，常常要在运算中分离处理&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;二进制小数末尾添上 0 或去掉 0，小数的大小也不变，但是意义不一样。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;正二进制整数或小数的开头添上 0 或去掉 0，数的大小不变。负二进制整数或小数的开头添上 1 或去掉 1，数的大小也不变。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;242-ieee浮点表示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#242-ieee浮点表示&#34;&gt;#&lt;/a&gt; 2.4.2  IEEE 浮点表示&lt;/h2&gt;
&lt;p&gt;IEEE 标准 754 规定了三种浮点数格式：单精度、双精度、扩展精度。前两者正好对应 C 语言里头的 float、double 或者 FORTRAN 里头的 real、double 精度类型。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3OTMwNC9hcnRpY2xlL2RldGFpbHMvMTA4MDQ0NzU0&#34;&gt;详见&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;243-数值示例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#243-数值示例&#34;&gt;#&lt;/a&gt; 2.4.3 数值示例&lt;/h2&gt;
&lt;p&gt;来日方长：详见 csapp  p87&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/TCworkor/images/img/202210171328815.png&#34; alt=&#34;截图20221002221650&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;244舍入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#244舍入&#34;&gt;#&lt;/a&gt; 2.4.4 舍入&lt;/h2&gt;
&lt;p&gt;因为表示方法限制了浮点数的范围和精度，所以浮点运算只能近似表示实数运算。&lt;/p&gt;
&lt;p&gt;舍入运算，可以找到最接近的匹配值。（需要定义舍入方向）&lt;/p&gt;
&lt;p&gt;舍入会存在偏差，（向偶数舍入可以避免偏差）&lt;/p&gt;
&lt;h2 id=&#34;245-浮点运算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#245-浮点运算&#34;&gt;#&lt;/a&gt; 2.4.5 浮点运算&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;浮点数的加减运算分为 5 个步骤：对阶、尾数相加、尾数规格化、尾数舍入处理、溢出判断处理。&lt;/p&gt;
&lt;h5 id=&#34;1-对阶所谓对阶就是让两个操作数阶数相同以便进行加减-实现的方式是对较小数的尾数进行右移操作-对阶的原则是向高阶看齐&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-对阶所谓对阶就是让两个操作数阶数相同以便进行加减-实现的方式是对较小数的尾数进行右移操作-对阶的原则是向高阶看齐&#34;&gt;#&lt;/a&gt; 1. 对阶：所谓对阶，就是让两个操作数阶数相同，以便进行加减。实现的方式是对较小数的尾数进行右移操作。对阶的原则是向高阶看齐。&lt;/h5&gt;
&lt;h5 id=&#34;2-尾数加减将两个操作数的尾数相加减-在ieee754标准中对于规格化数来说在小数点前有一位隐藏位1在加减过程中需要把它还原到尾数中-尾数加减的实质是原码的加减&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-尾数加减将两个操作数的尾数相加减-在ieee754标准中对于规格化数来说在小数点前有一位隐藏位1在加减过程中需要把它还原到尾数中-尾数加减的实质是原码的加减&#34;&gt;#&lt;/a&gt; 2. 尾数加减：将两个操作数的尾数相加减。在 IEEE754 标准中，对于规格化数来说在小数点前有一位隐藏位 1，在加减过程中需要把它还原到尾数中。尾数加减的实质是原码的加减，&lt;/h5&gt;
&lt;h5 id=&#34;3尾数规格化加减完成的尾数形式未必满足ieee754对于尾数的要求即保留23位小数点在第一个1之后-需要对尾数进行左规和右规下面介绍一下左规和右规-左规将尾数向左移用于清除第一个1前面出现的0-左规伴随着阶码减少在左规过程中要检测阶码是否发生下溢即阶码达到最小值0000-0000-右规将尾数向右移用于两数相加后出现向高位进位的情况-因为两数相加最多进一位所以右规最多一位-右规伴随着阶码的增加在右规过程中要检测阶码是否发生上溢即阶码达到最大值1111-1111&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3尾数规格化加减完成的尾数形式未必满足ieee754对于尾数的要求即保留23位小数点在第一个1之后-需要对尾数进行左规和右规下面介绍一下左规和右规-左规将尾数向左移用于清除第一个1前面出现的0-左规伴随着阶码减少在左规过程中要检测阶码是否发生下溢即阶码达到最小值0000-0000-右规将尾数向右移用于两数相加后出现向高位进位的情况-因为两数相加最多进一位所以右规最多一位-右规伴随着阶码的增加在右规过程中要检测阶码是否发生上溢即阶码达到最大值1111-1111&#34;&gt;#&lt;/a&gt; 3. 尾数规格化：加减完成的尾数形式未必满足 IEEE754 对于尾数的要求，即保留 23 位，小数点在第一个 1 之后。需要对尾数进行左规和右规，下面介绍一下左规和右规。左规：将尾数向左移，用于清除第一个 1 前面出现的 0。左规伴随着阶码减少，在左规过程中要检测阶码是否发生下溢，即阶码达到最小值（0000 0000）。右规：将尾数向右移，用于两数相加后出现向高位进位的情况。因为两数相加最多进一位，所以右规最多一位。右规伴随着阶码的增加，在右规过程中要检测阶码是否发生上溢，即阶码达到最大值（1111 1111）。&lt;/h5&gt;
&lt;h5 id=&#34;&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h5&gt;
&lt;h5 id=&#34;5-溢出判断-在浮点数中是以阶码的溢出与否来作为评判标准的-单精度溢出分为上溢指数大于等于127和下溢指数小于等于-126&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-溢出判断-在浮点数中是以阶码的溢出与否来作为评判标准的-单精度溢出分为上溢指数大于等于127和下溢指数小于等于-126&#34;&gt;#&lt;/a&gt; 5. 溢出判断：  在浮点数中是以阶码的溢出与否来作为评判标准的。单精度溢出分为上溢（指数大于等于 127）和下溢（指数小于等于 - 126)。&lt;/h5&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详见：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dsc19udWFhL2FydGljbGUvZGV0YWlscy8xMDU0MDEzNzI=&#34;&gt;详见&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;25-小结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#25-小结&#34;&gt;#&lt;/a&gt; 2.5 小结&lt;/h1&gt;
&lt;p&gt;虽然有很多不懂，但是就当作练习使用 typora 吧。以后回来看这些笔记怎么说也有帮助吧。（±+）&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/12/%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid>
            <title>开始使用Linux操作系统</title>
            <link>http://example.com/2022/10/12/%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
            <category>Linux</category>
            <pubDate>Wed, 12 Oct 2022 19:07:29 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;开始使用linux操作系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#开始使用linux操作系统&#34;&gt;#&lt;/a&gt; 开始使用 Linux 操作系统&lt;/h1&gt;
&lt;h2 id=&#34;2-1linux-目录结构与访问路径&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-1linux-目录结构与访问路径&#34;&gt;#&lt;/a&gt; 2-1；Linux 目录结构与访问路径&lt;/h2&gt;
&lt;h3 id=&#34;目录的基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#目录的基本概念&#34;&gt;#&lt;/a&gt; 目录的基本概念&lt;/h3&gt;
&lt;p&gt;目录是描述文件夹的专有名词。&lt;/p&gt;
&lt;p&gt;在计算机代码中，&lt;u&gt;文件夹形式与书本目录相同&lt;/u&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;书本目录记录所有书的章节名和页码。&lt;/li&gt;
&lt;li&gt;计算机目录记录其中包含的文件和对应的访问地址。&lt;/li&gt;
&lt;li&gt;相对于普通文件，目录也称为目录文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;linux文件系统是树形结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#linux文件系统是树形结构&#34;&gt;#&lt;/a&gt; Linux 文件系统是树形结构&lt;/h3&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;层次结构鲜明&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易于扩展分支&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分支隔离互不依赖&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Windows 系统每个盘符作为文件根节点（C 盘。D 盘）&lt;/p&gt;
&lt;p&gt;Linux 系统采用单根结构，整个文件系统只有一个根。&lt;/p&gt;
&lt;h3 id=&#34;linux的根目录下有众多的二级目录如&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#linux的根目录下有众多的二级目录如&#34;&gt;#&lt;/a&gt; Linux 的根目录（/）下有众多的二级目录，如&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;（/boot，存放 Linux 启动所需的内核文件和镜像文件）&lt;/li&gt;
&lt;li&gt;(/bin, 存放最常用的命令)&lt;/li&gt;
&lt;li&gt;（/dev，存放 Linux 的外部设备，且在 Linux 中访问设备的方式和访问文件相同）&lt;/li&gt;
&lt;li&gt;（/etc，存放所有系统管理所需要的配置文件和子目录）&lt;/li&gt;
&lt;li&gt;（/home，用户的主目录，属于用户）&lt;/li&gt;
&lt;li&gt;（/root，此目录为系统管理员，也称作超级管理员 root 用户的主目录）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;访问路径&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#访问路径&#34;&gt;#&lt;/a&gt; 访问路径&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;绝对路径&lt;/strong&gt;（文件或目录相对于根目录的可访问路径）&lt;/p&gt;
&lt;p&gt;形式特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Windows：从盘符开始书写的路径。如：C：\Linux&lt;/li&gt;
&lt;li&gt;Linux：从根目录（/）开始书写的路径。如：/home&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;优缺：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;具有&lt;u&gt;唯一性&lt;/u&gt;，但是只能在&lt;u&gt;特定的操作系统环境&lt;/u&gt;下才能准确定位目标路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;不适合编写脚本&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;相对路径&lt;/strong&gt;（文件或目录相对于当前目录的可访问路径）&lt;/p&gt;
&lt;p&gt;形式特点：&lt;/p&gt;
&lt;p&gt;1. 不是从根目录（/）开始书写的路径。如：etc。&lt;/p&gt;
&lt;p&gt;2. 一般从当前目录开始书写&lt;/p&gt;
&lt;p&gt;tips：&lt;/p&gt;
&lt;p&gt;用 “.” 表示本级目录；用 “…” 表示上级目录。&lt;/p&gt;
&lt;p&gt;优缺：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同一个参考体系内，&lt;u&gt;相对路径不变&lt;/u&gt;，适合编写脚本。&lt;/li&gt;
&lt;li&gt;计算较为&lt;strong&gt;复杂&lt;/strong&gt;，需要掌握文件系统的目录结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（归结而言一个是从根目录出发，一个是从其他的目录出发，但无论从什么地方出发，目的地是一样的，不过过程不同）&lt;/p&gt;
&lt;h2 id=&#34;2-2定位和切换目录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-2定位和切换目录&#34;&gt;#&lt;/a&gt; 2-2 定位和切换目录&lt;/h2&gt;
&lt;h3 id=&#34;定位当前目录确定当前工作目录的绝对路径&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定位当前目录确定当前工作目录的绝对路径&#34;&gt;#&lt;/a&gt; 定位当前目录（确定当前工作目录的绝对路径）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;命令&lt;/strong&gt;：pwd（打印当前工作目录）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输出&lt;/strong&gt;：当前所在工作目录的绝对路径&lt;/p&gt;
&lt;p&gt;（可用于相对路径的参考点）&lt;/p&gt;
&lt;h3 id=&#34;切换工作目录前往新的工作目录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#切换工作目录前往新的工作目录&#34;&gt;#&lt;/a&gt; 切换工作目录（前往新的工作目录）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;命令&lt;/strong&gt;：cd（cd+【空格】+ 目标的绝对路径或相对路径）&lt;/p&gt;
&lt;p&gt;tips：&lt;/p&gt;
&lt;p&gt;{./}  表示当前目录&lt;/p&gt;
&lt;p&gt;{…/} 上一级目录&lt;/p&gt;
&lt;p&gt;单走 {cd} 直接切换至用户家目录&lt;/p&gt;
&lt;p&gt;{cd + 空格 + 横线} 切换到上一个工作目录（上一次工作的目录）&lt;/p&gt;
&lt;p&gt;{cd + 空格 + 波浪线} 切换到用户家目录&lt;/p&gt;
&lt;h2 id=&#34;2-3查看目录内容&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-3查看目录内容&#34;&gt;#&lt;/a&gt; 2-3 查看目录内容&lt;/h2&gt;
&lt;h3 id=&#34;ulinux命令基本范式u&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ulinux命令基本范式u&#34;&gt;#&lt;/a&gt; &lt;u&gt;&lt;strong&gt;Linux 命令基本范式&lt;/strong&gt;&lt;/u&gt;&lt;/h3&gt;
&lt;p&gt;含（命令关键词，命令选项，命令参数）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;范式&lt;/strong&gt;：&lt;strong&gt;命令关键字   选项     命令参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令关键字&lt;/strong&gt;：必不可少，指明要完成的具体操作&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选项&lt;/strong&gt;：可选，指定用什么方式来完成操作，一般有默认值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令参数&lt;/strong&gt;：可选，指明操作对象&lt;/p&gt;
&lt;h3 id=&#34;查看目录内容&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看目录内容&#34;&gt;#&lt;/a&gt; 查看目录内容&lt;/h3&gt;
&lt;p&gt;含（查看指定目标内容，按指定格式查看目录内容，按指定格式查看指定目录内容）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令&lt;/strong&gt;：ls  【选项】 【目录路径】（分别对应 ，命令关键字，选项，命令参数）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其中选项&lt;/strong&gt;：                                &lt;u&gt;注：（可以有多个选项内容，如：ls -l -a /  ； ls -al /）&lt;/u&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;l：长格式显示目录内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a：显示目录所有内容，包括隐藏文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无选项：仅显示非隐藏文件的名称&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;其中目录路径&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以是绝对路径，也可为相对路径&lt;/li&gt;
&lt;li&gt;无参数：默认显示当前目录下的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;tips：&lt;/p&gt;
&lt;p ls+空格+-l+空格+=&#34;&#34;&gt;{ll + 空格 +/}=&lt;/p&gt;
&lt;p&gt;ll    -d    /dev（查看 dev 目录的相关信息）&lt;/p&gt;
&lt;p&gt;ll     /dev（查看 dev 目录的内容）（注意空格）&lt;/p&gt;
&lt;p&gt;{ls + 空格 ±±+help}     查看命令的使用格式与方法。&lt;/p&gt;
&lt;p&gt;ll   查看当前目录内容&lt;/p&gt;
&lt;h2 id=&#34;2-4创建目录和文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-4创建目录和文件&#34;&gt;#&lt;/a&gt; 2-4 创建目录和文件&lt;/h2&gt;
&lt;h3 id=&#34;u新建目录u含在指定位置新建目录在指定路径上新建所有目录同时新建多个目录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#u新建目录u含在指定位置新建目录在指定路径上新建所有目录同时新建多个目录&#34;&gt;#&lt;/a&gt; &lt;u&gt;&lt;strong&gt;新建目录&lt;/strong&gt;&lt;/u&gt;，含 (在指定位置新建目录，在指定路径上新建所有目录，同时新建多个目录)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;命令&lt;/strong&gt;：mkdir  【选项】  【目录路径】&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其中目录路径&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以是绝对路径，也可以为相对路径&lt;/li&gt;
&lt;li&gt;可以是多个参数，表示一次性创建多个目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;其中选项&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;p：若指定的路径上有不存在目录，一并创建‘&lt;/li&gt;
&lt;li&gt;无选项：仅创建指定路径上最后一个目标目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;tips：&lt;/p&gt;
&lt;p&gt;mkdir   目录 1  ；表示新建目录 1&lt;/p&gt;
&lt;p&gt;mkdir    -p    目录 2 / 目录 3（此时会先在当前目录下创建目录 2，再在目录 2 下创建目录 3，，如果不使用 - p，则无法执行命令）&lt;/p&gt;
&lt;h3 id=&#34;新建文件含touch命令echo命令输出重定向&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#新建文件含touch命令echo命令输出重定向&#34;&gt;#&lt;/a&gt; 新建文件，含 (touch 命令，echo 命令输出重定向)&lt;/h3&gt;
&lt;p&gt;&lt;u&gt;法 1：touch  【文件路径】&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其中文件路径&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以是相对路径也可以是绝对路径&lt;/li&gt;
&lt;li&gt;可以是多个参数，表示一次性创建多个文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;u&gt;法 2：vi   【文件路径】&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其中文件路径&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以是绝对路径，也可以是相对路径&lt;/li&gt;
&lt;li&gt;可以是已经存在的文件（可以该编辑文件）&lt;/li&gt;
&lt;li&gt;也可以是还未创建的文件（新建并编辑该文件）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;u&gt;法 3：echo   内容信息     &amp;gt;|&amp;gt;&amp;gt;    【文件路径】&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输出重定向符&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;{&amp;gt;}: 将命令的结果输出从显示器改到文件（覆盖）&lt;/li&gt;
&lt;li&gt;{&amp;gt;&amp;gt;}：将命令的结果输出从显示器改到文件（追加）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;其中文件路径&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以是绝对路径，也可以是相对路径‘&lt;/li&gt;
&lt;li&gt;可以是已经存在的文件（编辑文件）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;tips：&lt;/p&gt;
&lt;p&gt;touch     文件 1   | 创建一个文件&lt;/p&gt;
&lt;p&gt;touch     文件 2     | 文件 3    ；创建多个文件&lt;/p&gt;
&lt;p&gt;vi     文件 1    |（因为已经存在，所以编辑文件）（会进入 vi 编辑器中，i 键 进入插入模式  ，Esc 键退回 vi 命令模式，输入   ：  符  ，进入 vi 底行模式 ，输入 wq 保存文件）&lt;/p&gt;
&lt;p&gt;cat   文件 1  | 查看文件内容&lt;/p&gt;
&lt;p&gt;cat    文件 4  | 文件不存在，则先创建再编辑&lt;/p&gt;
&lt;p&gt;echo “这是文件 5”      &amp;gt;     文件 5&lt;/p&gt;
&lt;p&gt;echo “2002  3 2”   &amp;gt;&amp;gt;     文件 1（表示追加输入）&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
