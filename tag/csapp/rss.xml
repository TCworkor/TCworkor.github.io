<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>TCworker • Posts by &#34;csapp&#34; tag</title>
        <link>http://example.com</link>
        <description>time to work</description>
        <language>zh-CN</language>
        <pubDate>Wed, 12 Oct 2022 19:07:35 +0800</pubDate>
        <lastBuildDate>Wed, 12 Oct 2022 19:07:35 +0800</lastBuildDate>
        <category>csapp</category>
        <category>闲暇</category>
        <category>Linux</category>
        <category>图床</category>
        <category>Typroa</category>
        <category>blog</category>
        <category>hexo</category>
        <category>python</category>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/12/csapp%E7%AC%ACll%E7%AB%A0/</guid>
            <title>csapp第二章</title>
            <link>http://example.com/2022/10/12/csapp%E7%AC%ACll%E7%AB%A0/</link>
            <category>csapp</category>
            <pubDate>Wed, 12 Oct 2022 19:07:35 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;csapp第二章可能没什么帮助就随便看看吧&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#csapp第二章可能没什么帮助就随便看看吧&#34;&gt;#&lt;/a&gt; csapp 第二章（可能没什么帮助，就随便看看吧）&lt;/h1&gt;
&lt;p&gt;（现代计算机以二进制存储信息。相较于十进制，它能更好的适配计算机，能够更可靠的进行信息的表示、存储传输；用不同的位组合来表示元素；三种重要的数字编码：&lt;u&gt;无符号编码&lt;/u&gt;，&lt;u&gt;二进制补码&lt;/u&gt;，&lt;u&gt;浮点数编码&lt;/u&gt;；）&lt;/p&gt;
&lt;h1 id=&#34;21信息存储&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#21信息存储&#34;&gt;#&lt;/a&gt; 2.1 信息存储&lt;/h1&gt;
&lt;p&gt;1. 字节（byte）是&lt;strong&gt; 8 位&lt;/strong&gt;的块，&lt;u&gt;作为最小的可寻址的存储器单位&lt;/u&gt;&amp;lt;而不是单独的位&amp;gt;.&lt;/p&gt;
&lt;p&gt;2. 存储器中每个字节由一个惟一的数字标识，这称之为他的&lt;u&gt;地址&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;3. 所有可能地址的集合，称为&lt;u&gt;虚拟地址空间&lt;/u&gt;。&amp;lt;像一个分好类别的仓库吧？&amp;gt;&lt;/p&gt;
&lt;p&gt;4. 编译和运行时，系统将存储空间划分为更可管理的单元，来存放不同程序对象（程序数据、指令和控制信息）。&amp;lt;分类存放，便于之后的管理与取用&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;211十六进制表示法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#211十六进制表示法&#34;&gt;#&lt;/a&gt; 2.1.1 十六进制表示法&lt;/h2&gt;
&lt;p&gt;因为二进制表示太冗长，而十进制与位模式的互相转化很麻烦，两种符号表示法都比较麻烦。所以采取 16 进制来书写位模式。编写机械级程序常常需要手工地进行十、二、十六之间的转换。&lt;u&gt;需要掌握进制之间的转化方法&lt;/u&gt;。&lt;/p&gt;
&lt;h2 id=&#34;212-字&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#212-字&#34;&gt;#&lt;/a&gt; 2.1.2 字&lt;/h2&gt;
&lt;p&gt;每台计算机都有一个字长（world size），指明整数和指针数据的标称大小（normal size）。&lt;strong&gt;字长 决定虚拟地址的最大大小&lt;/strong&gt;。&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxNDAyNDc1L2FydGljbGUvZGV0YWlscy8xMjQ4MDk5MjE=&#34;&gt;字长是什么&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;213-数据大小&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#213-数据大小&#34;&gt;#&lt;/a&gt; 2.1.3 数据大小&lt;/h2&gt;
&lt;p&gt;计算机和编译器用不同方式来编码数字，如不同长度的整数和浮点数，从而支持多种数字格式。（程序员应该提高他们编写程序的可移植性，就是说，使得程序对不同数据类型的准确大小不敏感）&amp;lt;就是可以在其他设备，其他系统上运行？&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;214寻址和字节顺序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#214寻址和字节顺序&#34;&gt;#&lt;/a&gt; 2.14 寻址和字节顺序&lt;/h2&gt;
&lt;p&gt;对于跨越多字节的程序对象，要建立两个规则：1. 对象地址是什么；2. 在存储器中如何对这些字节排序。几乎所有机器，&lt;u&gt;多字节对象都被存储为连续的字节序列，对象的地址为&lt;strong&gt;所使用字节序列中的最小地址&lt;/strong&gt;。&lt;/u&gt;（越小越精确，要找到对象的精确地址？）&lt;/p&gt;
&lt;h2 id=&#34;215-表示字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#215-表示字符串&#34;&gt;#&lt;/a&gt; 2.15 表示字符串&lt;/h2&gt;
&lt;p&gt;字符串被编码为一个&lt;strong&gt;以 null（其值）字符结尾&lt;/strong&gt;的字符数组。每个字符由标准码表示，常用 ASCII 字符码。（&lt;u&gt;文本数据比二进制数据具有更强的平台独立性&lt;/u&gt;）&amp;lt;不是特别理解・-・&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;216-表示代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#216-表示代码&#34;&gt;#&lt;/a&gt; 2.1.6 表示代码&lt;/h2&gt;
&lt;p&gt;多数情况下，&lt;u&gt;不同机器类型使用不同且不兼容的指令和编码方式。&lt;/u&gt;二进制代码很少能在不同机器和操作系统组合之间移植。&lt;/p&gt;
&lt;h2 id=&#34;217-布尔代数和环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#217-布尔代数和环&#34;&gt;#&lt;/a&gt; 2.1.7 布尔代数和环&lt;/h2&gt;
&lt;p&gt;因为二进制是计算机编码、存储和操作信息的核心，所以围绕数值 0 和 1 已经演化出了丰富的数学知识体系。（I compeletly don’t understand what it wants telling me）&lt;/p&gt;
&lt;h2 id=&#34;218-c中的位级运算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#218-c中的位级运算&#34;&gt;#&lt;/a&gt; 2.1.8  C 中的位级运算&lt;/h2&gt;
&lt;p&gt;C 的一个很有用的特性就是它是支持按位布尔运算，在布尔运算中使用的那些符号就是在 C 中使用的。（&lt;u&gt;确定一个位级表达式的结果的最好的方法就是将十六进制参数扩展成他们的二进制表示，执行二进制运算，然后再转换为十六进制。&amp;lt;/u）&lt;/p&gt;
&lt;h2 id=&#34;219-c中的逻辑运算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#219-c中的逻辑运算&#34;&gt;#&lt;/a&gt; 2.1.9   C 中的逻辑运算&lt;/h2&gt;
&lt;p 逻辑运算认为所有非零参数都表示true，而参数零表示false=&#34;&#34;&gt;C 中提供了一系列的逻辑运算符，但逻辑运算容易与位级运算相混淆，而他们的功能又是完全不同的。&lt;/p&gt;
&lt;h2 id=&#34;2110-c中的移位运算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2110-c中的移位运算&#34;&gt;#&lt;/a&gt; 2.1.10  C 中的移位运算&lt;/h2&gt;
&lt;p&gt;C 提供了一系列的移位运算，有向左或向右移位模式。（移动后要用 0 进行补位）&lt;/p&gt;
&lt;h1 id=&#34;22-整数表示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#22-整数表示&#34;&gt;#&lt;/a&gt; 2.2 整数表示&lt;/h1&gt;
&lt;h2 id=&#34;221整型数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#221整型数据类型&#34;&gt;#&lt;/a&gt; 2.2.1 整型数据类型&lt;/h2&gt;
&lt;p&gt;C 支持多种整型数据类型 —— 表示有限范围的整数。如 char、short、int、、long。C 标准定义了每种数据类型必须能够表示的最小值范围。具体而言，数据类型的取值会有差异。&lt;/p&gt;
&lt;h2 id=&#34;222无符号和二进制补码编码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#222无符号和二进制补码编码&#34;&gt;#&lt;/a&gt; 2.2.2 无符号和二进制补码编码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;二进制的补码范围是不对称的，容易产生错误。&lt;/li&gt;
&lt;li&gt;最大无符号值刚好比二进制补码的最大值的两倍大一（1）点。&lt;/li&gt;
&lt;li&gt;尽管 C 的标准没有要求用二进制补码形式来表示有符号整数，但几乎所有机器都是这么的。&lt;/li&gt;
&lt;li&gt;对有符号数，其最高有效位也称为符号位（sign bit），0 为正，1 为负。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;223有符号数和无符号数之间的转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#223有符号数和无符号数之间的转换&#34;&gt;#&lt;/a&gt; 2.2.3 有符号数和无符号数之间的转换&lt;/h2&gt;
&lt;p&gt;依托两者之间的映射关系进行转换，具体方法如有需要：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aGlkYW8uYmFpZHUuY29tL3F1ZXN0aW9uLzUxMjk3MjAwLmh0bWw=&#34;&gt;有符号数如何与无符号数转换&lt;/span&gt;                    &amp;lt;用 ctrl + 点击&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;224-c中的有符号与无符号数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#224-c中的有符号与无符号数&#34;&gt;#&lt;/a&gt; 2.2.4 C 中的有符号与无符号数&lt;/h2&gt;
&lt;p&gt;C 支持所有整数数据类型的有符号与无符号运算。尽管 C 标准没有指定某种有符号数的表示，但几乎所有机器都使用二进制补码。通常，大多数数字都是默认有符号的。（另外，当一种类型的表达式被赋值给另一种类型的变量时，转换是隐式发生的）&lt;/p&gt;
&lt;p&gt;当执行一个运算时，如果它的一个运算数是有符号而另一个是无符号，那么 C 将有符号参数类型转换为无符号数，并假设两数非负，并执行。（于一些情况下会导致运算错误）&lt;/p&gt;
&lt;h2 id=&#34;225扩展一个数字的位表示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#225扩展一个数字的位表示&#34;&gt;#&lt;/a&gt; 2.2.5 扩展一个数字的位表示&lt;/h2&gt;
&lt;p&gt;一个常见的运算是在不同字长的整数之间转换，同时保持数值不变。而当目标类型太小了，则转换可能失效，但从较小到较大，应该总可能的。（*&lt;em&gt; 将一个无符号数转换为一个更大的数据类型，只要简单的在表示的开头添加 0，这种运算被称为零扩展（zero extension）；要将一个二进制补码数字转换俄日一个更大的数据类型，规则是执行一个符号扩展（sign extension），在表示中添加最高有效位的值）。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;从一个数据大小到另一个数据大小，以及&lt;u&gt;无符号和有符号数字之间的转换的相对顺序&lt;/u&gt;能够影响一个程序的行为。&lt;/p&gt;
&lt;h2 id=&#34;226-截断数字&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#226-截断数字&#34;&gt;#&lt;/a&gt; 2.2.6 截断数字&lt;/h2&gt;
&lt;p&gt;详见：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpcGFucGFuOTAwNzIxL2FydGljbGUvZGV0YWlscy8xMjA4MDQ0MTc=&#34;&gt;截断数字&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;227有符号数和无符号数的建议&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#227有符号数和无符号数的建议&#34;&gt;#&lt;/a&gt; 2.2.7 有符号数和无符号数的建议&lt;/h2&gt;
&lt;p&gt;1. 尽量不要在你的代码中使用无符号数，以免增加不必需要的复杂性。&lt;/p&gt;
&lt;p&gt;2. 尽量使用像 int 那样的有符号类型，这样在涉及升级混合类型的复杂细节时，不必担心边界情况。&lt;/p&gt;
&lt;p&gt;3. 只有在使用位段和二进制掩码时，才可以用无符号数。应该在表达式中使用强制类型转换，使操作数均为有符号或无符号数，这样就不必由编译器来选择结果的类型。&lt;/p&gt;
&lt;h1 id=&#34;23-整数运算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23-整数运算&#34;&gt;#&lt;/a&gt; 2.3 整数运算&lt;/h1&gt;
&lt;h2 id=&#34;231无符号加法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#231无符号加法&#34;&gt;#&lt;/a&gt; 2.3.1 无符号加法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;要想完整地表示运算结果，不能对字长做任何限制。&lt;/li&gt;
&lt;li&gt;常见的编程语言支持固定精度的运算，因此 “加法” 和 “乘法” 这样的运算不同于它们在整数上的相应运算。&lt;/li&gt;
&lt;li&gt;无符号运算可视作一种形式的模运算。&lt;/li&gt;
&lt;li&gt;&lt;u&gt;&lt;strong&gt;算术运算溢出&lt;/strong&gt;&lt;/u&gt;，是指完整的整数结果不能放到数据类型的字长限制中。（&lt;u&gt;执行 C 程序时，不会将溢出作为错误而发出信号&lt;/u&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;232二进制补码加法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#232二进制补码加法&#34;&gt;#&lt;/a&gt; 2.3.2 二进制补码加法&lt;/h2&gt;
&lt;p&gt;与无符号加法有相似之处，详见导引。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1p3bl8yMjMvYXJ0aWNsZS9kZXRhaWxzLzEyMDE2ODc5OA==&#34;&gt;1 号导引&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhhbmdzaGlsb25nLmNuL3dvcmsvMjYwNTk1Lmh0bWw=&#34;&gt;2 号导引&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;233-二进制补码的非&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#233-二进制补码的非&#34;&gt;#&lt;/a&gt; 2.3.3 二进制补码的非&lt;/h2&gt;
&lt;p&gt;一种有名的用来执行位级二进制补码的非（negation）的 技术是对每个位取反（或取补），然后将结果加一。（以后还请回看 csapp   &amp;gt;_&amp;lt;）&lt;/p&gt;
&lt;h2 id=&#34;234无符号乘法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#234无符号乘法&#34;&gt;#&lt;/a&gt; 2.3.4 无符号乘法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;0*0=0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;0*1=0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1*0=0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1*1=1&lt;/p&gt;
&lt;p&gt;二进制乘法相似于十进制乘法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;235二进制补码乘法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#235二进制补码乘法&#34;&gt;#&lt;/a&gt; 2.3.5 二进制补码乘法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;补码 * 补码 = 补码（什么哦 *^*）&lt;/li&gt;
&lt;li&gt;1、无符号数 * 无符号数 = 无符号数&lt;br&gt;
 2、无符号数 * 有符号数 = 有符号数&lt;br&gt;
 3、有符号数 * 无符号数 = 有符号数&lt;br&gt;
 4、有符号数 * 有符号数 = 有符号数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;236与237-乘除2的幂&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#236与237-乘除2的幂&#34;&gt;#&lt;/a&gt; 2.3.6 与 2.3.7  乘除 2 的幂&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B1bXBpL2FydGljbGUvZGV0YWlscy8xMDQ0OTc1Mjk=&#34;&gt;计算 2 的幂的解方法&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZ2RqZHNqaC9wLzUwMzc2NzMuaHRtbCM6fjp0ZXh0PSVFNSU5QyVBOCVFNSVBNCVBNyVFNSVBNCU5QSVFNiU5NSVCMCVFNyU5QSU4NCVFNiU5QyVCQSVFNSU5OSVBOCVFNCVCOCVBRCVFRiVCQyU4QyVFOSU5OSVBNCVFNiVCMyU5NSVFOCVBNiU4MSVFNiVBRiU5NCVFNCVCOSU5OCVFNiVCMyU5NSVFOCVCRiU5OCVFNiU5QyU4OSVFNSU4QSVBMCVFNiVCMyU5NSVFOCVCRiU5OSVFNCVCQSU5Qg==&#34;&gt;具体解释 1&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDQ0NjI1Mi9hcnRpY2xlL2RldGFpbHMvMTA5MzgwMDEx&#34;&gt;通过位运算来进行 2 的幂运算&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;24浮点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#24浮点&#34;&gt;#&lt;/a&gt; 2.4 浮点&lt;/h1&gt;
&lt;p&gt;用于精确的计算，提高运算精度。&lt;/p&gt;
&lt;h2 id=&#34;241-二进制小数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#241-二进制小数&#34;&gt;#&lt;/a&gt; 2.4.1  二进制小数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;与十进制类似，用科学计数法表示（以 2 作指数底数）。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分为整数与小数两个部分，常常要在运算中分离处理&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;二进制小数末尾添上 0 或去掉 0，小数的大小也不变，但是意义不一样。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;正二进制整数或小数的开头添上 0 或去掉 0，数的大小不变。负二进制整数或小数的开头添上 1 或去掉 1，数的大小也不变。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;242-ieee浮点表示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#242-ieee浮点表示&#34;&gt;#&lt;/a&gt; 2.4.2  IEEE 浮点表示&lt;/h2&gt;
&lt;p&gt;IEEE 标准 754 规定了三种浮点数格式：单精度、双精度、扩展精度。前两者正好对应 C 语言里头的 float、double 或者 FORTRAN 里头的 real、double 精度类型。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3OTMwNC9hcnRpY2xlL2RldGFpbHMvMTA4MDQ0NzU0&#34;&gt;详见&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;243-数值示例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#243-数值示例&#34;&gt;#&lt;/a&gt; 2.4.3 数值示例&lt;/h2&gt;
&lt;p&gt;来日方长：详见 csapp  p87&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/TCworkor/images/img/202210171328815.png&#34; alt=&#34;截图20221002221650&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;244舍入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#244舍入&#34;&gt;#&lt;/a&gt; 2.4.4 舍入&lt;/h2&gt;
&lt;p&gt;因为表示方法限制了浮点数的范围和精度，所以浮点运算只能近似表示实数运算。&lt;/p&gt;
&lt;p&gt;舍入运算，可以找到最接近的匹配值。（需要定义舍入方向）&lt;/p&gt;
&lt;p&gt;舍入会存在偏差，（向偶数舍入可以避免偏差）&lt;/p&gt;
&lt;h2 id=&#34;245-浮点运算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#245-浮点运算&#34;&gt;#&lt;/a&gt; 2.4.5 浮点运算&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;浮点数的加减运算分为 5 个步骤：对阶、尾数相加、尾数规格化、尾数舍入处理、溢出判断处理。&lt;/p&gt;
&lt;h5 id=&#34;1-对阶所谓对阶就是让两个操作数阶数相同以便进行加减-实现的方式是对较小数的尾数进行右移操作-对阶的原则是向高阶看齐&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-对阶所谓对阶就是让两个操作数阶数相同以便进行加减-实现的方式是对较小数的尾数进行右移操作-对阶的原则是向高阶看齐&#34;&gt;#&lt;/a&gt; 1. 对阶：所谓对阶，就是让两个操作数阶数相同，以便进行加减。实现的方式是对较小数的尾数进行右移操作。对阶的原则是向高阶看齐。&lt;/h5&gt;
&lt;h5 id=&#34;2-尾数加减将两个操作数的尾数相加减-在ieee754标准中对于规格化数来说在小数点前有一位隐藏位1在加减过程中需要把它还原到尾数中-尾数加减的实质是原码的加减&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-尾数加减将两个操作数的尾数相加减-在ieee754标准中对于规格化数来说在小数点前有一位隐藏位1在加减过程中需要把它还原到尾数中-尾数加减的实质是原码的加减&#34;&gt;#&lt;/a&gt; 2. 尾数加减：将两个操作数的尾数相加减。在 IEEE754 标准中，对于规格化数来说在小数点前有一位隐藏位 1，在加减过程中需要把它还原到尾数中。尾数加减的实质是原码的加减，&lt;/h5&gt;
&lt;h5 id=&#34;3尾数规格化加减完成的尾数形式未必满足ieee754对于尾数的要求即保留23位小数点在第一个1之后-需要对尾数进行左规和右规下面介绍一下左规和右规-左规将尾数向左移用于清除第一个1前面出现的0-左规伴随着阶码减少在左规过程中要检测阶码是否发生下溢即阶码达到最小值0000-0000-右规将尾数向右移用于两数相加后出现向高位进位的情况-因为两数相加最多进一位所以右规最多一位-右规伴随着阶码的增加在右规过程中要检测阶码是否发生上溢即阶码达到最大值1111-1111&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3尾数规格化加减完成的尾数形式未必满足ieee754对于尾数的要求即保留23位小数点在第一个1之后-需要对尾数进行左规和右规下面介绍一下左规和右规-左规将尾数向左移用于清除第一个1前面出现的0-左规伴随着阶码减少在左规过程中要检测阶码是否发生下溢即阶码达到最小值0000-0000-右规将尾数向右移用于两数相加后出现向高位进位的情况-因为两数相加最多进一位所以右规最多一位-右规伴随着阶码的增加在右规过程中要检测阶码是否发生上溢即阶码达到最大值1111-1111&#34;&gt;#&lt;/a&gt; 3. 尾数规格化：加减完成的尾数形式未必满足 IEEE754 对于尾数的要求，即保留 23 位，小数点在第一个 1 之后。需要对尾数进行左规和右规，下面介绍一下左规和右规。左规：将尾数向左移，用于清除第一个 1 前面出现的 0。左规伴随着阶码减少，在左规过程中要检测阶码是否发生下溢，即阶码达到最小值（0000 0000）。右规：将尾数向右移，用于两数相加后出现向高位进位的情况。因为两数相加最多进一位，所以右规最多一位。右规伴随着阶码的增加，在右规过程中要检测阶码是否发生上溢，即阶码达到最大值（1111 1111）。&lt;/h5&gt;
&lt;h5 id=&#34;&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h5&gt;
&lt;h5 id=&#34;5-溢出判断-在浮点数中是以阶码的溢出与否来作为评判标准的-单精度溢出分为上溢指数大于等于127和下溢指数小于等于-126&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-溢出判断-在浮点数中是以阶码的溢出与否来作为评判标准的-单精度溢出分为上溢指数大于等于127和下溢指数小于等于-126&#34;&gt;#&lt;/a&gt; 5. 溢出判断：  在浮点数中是以阶码的溢出与否来作为评判标准的。单精度溢出分为上溢（指数大于等于 127）和下溢（指数小于等于 - 126)。&lt;/h5&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详见：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dsc19udWFhL2FydGljbGUvZGV0YWlscy8xMDU0MDEzNzI=&#34;&gt;详见&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;25-小结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#25-小结&#34;&gt;#&lt;/a&gt; 2.5 小结&lt;/h1&gt;
&lt;p&gt;虽然有很多不懂，但是就当作练习使用 typora 吧。以后回来看这些笔记怎么说也有帮助吧。（±+）&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
