{
    "version": "https://jsonfeed.org/version/1",
    "title": "TCworker",
    "description": "time to work",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/22/%E5%A6%82%E4%BD%95%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/",
            "url": "http://example.com/2022/10/22/%E5%A6%82%E4%BD%95%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/",
            "title": "如何为博客添加评论系统",
            "date_published": "2022-10-22T11:31:02.000Z",
            "content_html": "<h1 id=\"如何为博客添加评论系统\"><a class=\"markdownIt-Anchor\" href=\"#如何为博客添加评论系统\">#</a> 如何为博客添加评论系统</h1>\n<p>你是否还在为 hexo 博客场景单一而烦恼吗！</p>\n<p>你是否还在为 hexo 博客的外观平平无奇而忧虑吗！</p>\n<p>你是否还在为 hexo 博客的评论难以开启而绝望吗！</p>\n<p>如果你刚刚搭好博客模板，如果你还没有开始配置，如果你还没有确定的博客主题。</p>\n<p>那么，我强烈安利 github 上的 hexo 主题： <strong>shoka</strong></p>\n<p>。。。。。。。。</p>\n<p>（抱歉啰嗦过头了）</p>\n<h2 id=\"1主题选择\"><a class=\"markdownIt-Anchor\" href=\"#1主题选择\">#</a> 1. 主题选择</h2>\n<p>一般来说，hexo 搭建的博客都要装载主题，而某些主题因为其自身的配置原因，是不支持评论系统的，所以在选择时候要避开一些不支持评论的主题。什么？你不想装载主题。这可以是可以，不过因为主题一般都会自带评论系统的一些插件，可以省下很多的麻烦。如我的主题（<strong>shoka</strong>），就很便于添加评论系统。</p>\n<h2 id=\"2网站准备\"><a class=\"markdownIt-Anchor\" href=\"#2网站准备\">#</a> 2. 网站准备</h2>\n<p>这里我是默认大家都装载了（<strong>shoka</strong>）主题，因为操作比较简单。至于该主题的安装，就烦请大家去 github 官网自己解决了。<strong>!+_+!</strong></p>\n<ol>\n<li>进入<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGVhbmNsb3VkLmNuLw==\"> LeanCloud</span> 官网，完成<u>注册和登录</u>。（可能还会有一些实名认证和邮箱认证）</li>\n</ol>\n<p><img data-src=\"https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210221936318.jpeg\" alt=\"网页捕获_22-10-2022_193344_www.leancloud.cn\"></p>\n<p>2. 点击左上角 <code>创建</code> 应用</p>\n<p><img data-src=\"https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210221940040.png\" alt=\"5c270bbffc674e1c9f7ff67d0b26fa76\"></p>\n<p>3. 完善信息（名称随意，计价方案选开发版，描述随意）</p>\n<p><img data-src=\"https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210221942465.png\" alt=\"f656e7d7376d423e9983243292791560\"></p>\n<p>4.<strong> 点击</strong>创建好的应用的设置（<u>齿轮状</u>），选择应用凭证并复制 <code>appid</code>  和 <code>appkey</code> ，后续会使用。</p>\n<p><img data-src=\"https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210221945436.png\" alt=\"622ee0cb1f4946dc91f71b326342fa94\"></p>\n<p><img data-src=\"https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210221945214.png\" alt=\"91072ec614aa4d349b6963d1ccd2f8ce\"></p>\n<p>5. 点击  <code>存储 -&gt; 结构化数据</code> ，选择  <code>创建 Class</code> ，名称  <code>Comment</code> ，其他保持默认，以后就可在此 Class 内查看；；；；点击  <code>存储 -&gt; 结构化数据</code> ，选择 <code>创建 Class</code> ，名称  <code>Counter</code> ，其他保持默认，以后就可在此 Class 内查看。</p>\n<p><img data-src=\"https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210221950153.png\" alt=\"b0fd3016cdaf422e8ea4763a014cd461\"></p>\n<p>6. 点击 <code>设置</code> ，点击 <code>安全中心</code> ，之后如图设置。</p>\n<p><img data-src=\"https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210221957329.jpeg\" alt=\"网页捕获_22-10-2022_194824_console.leancloud.cn\"></p>\n<h2 id=\"3本地文件配置\"><a class=\"markdownIt-Anchor\" href=\"#3本地文件配置\">#</a> 3. 本地文件配置</h2>\n<p>1. 在 hexo 的文件目录下，使用<u><strong>查找</strong></u>，查找文件 <code>_config.yml</code> 。因为这个文件有时候不好找。（图中我的 <code>blog</code>  目录就是 <code>hexo</code>  文件目录）</p>\n<p><img data-src=\"https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210222011389.png\" alt=\"QQ截图20221022201108\"></p>\n<p>2. 完成查找后，来到 hexo 博客<strong> shoka</strong> 主题的 <code>_config.yml</code>  配置文件中，<strong>修改文件内容</strong>（查找后可能有多个符合要求的文件，<strong>每一个都要修改</strong>，用记事本打开）</p>\n<p><img data-src=\"https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210222018582.png\" alt=\"QQ截图20221022201817\"></p>\n<p><code>appid</code>  和 <code>appkey</code>  是之前我们复制的，粘贴的时候记得 <code>：</code> 后有一个空格。</p>\n<p>最后， <code>hexo c</code> ， <code>hexo g</code> ， <code>hexo d</code> 。重新配设博客后，评论系统就可以使用了。（怎样是不是非常简单）</p>\n<p>//// 部分图片源自网络。</p>\n",
            "tags": [
                "blog",
                "hexo"
            ]
        },
        {
            "id": "http://example.com/2022/10/17/%E5%9B%BE%E5%BA%8A%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%8A%E9%85%8D%E8%AE%BE/",
            "url": "http://example.com/2022/10/17/%E5%9B%BE%E5%BA%8A%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%8A%E9%85%8D%E8%AE%BE/",
            "title": "图床的概念及配设",
            "date_published": "2022-10-17T09:59:00.000Z",
            "content_html": "<hr>\n<h1 id=\"图床的概念及-u配设u\"><a class=\"markdownIt-Anchor\" href=\"#图床的概念及-u配设u\">#</a> 图床的概念及 <u>配设</u></h1>\n<h2 id=\"1什么是图床\"><a class=\"markdownIt-Anchor\" href=\"#1什么是图床\">#</a> 1. 什么是图床</h2>\n<p>图床，是互联网中存储图片的服务器。</p>\n<p>我们分享图片到网上，而其它网友可以访问你的图片（也就是看得见你的图片），实际上是图床提供空间存储了你的图片。总之，图床就是专门用来存放图片，同时允许你把图片对外连接的网上空间 。</p>\n<h2 id=\"2如何使用图床\"><a class=\"markdownIt-Anchor\" href=\"#2如何使用图床\">#</a> 2. 如何使用图床</h2>\n<p>（这里使用 GitHub，创建一个仓库来作为自己的图床，同时设置获取你 GitHub 账号的一个 Token ）</p>\n<p>具体教程如图（图片资源来自网络，如有侵权请反馈）</p>\n<h3 id=\"agithub创建仓库\"><a class=\"markdownIt-Anchor\" href=\"#agithub创建仓库\">#</a> A.GitHub 创建仓库</h3>\n<p>首先进入 github 网站（网上可以不费力的找到，）注册登录后，在主页如图</p>\n<h4 id=\"1进入仓库创建\"><a class=\"markdownIt-Anchor\" href=\"#1进入仓库创建\">#</a> 1.(进入仓库创建)</h4>\n<p><img data-src=\"https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210191158762.png\" alt=\"image-20221018232046409\"></p>\n<h4 id=\"2\"><a class=\"markdownIt-Anchor\" href=\"#2\">#</a> 2.</h4>\n<p>1（仓库名，建议输入 imges，也可以是其他。但<u>不要含有中文和其它非字母字符</u>）</p>\n<p>2.（勾选 public）</p>\n<p>3.（勾选）</p>\n<p>4.（点击）</p>\n<p><img data-src=\"https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210191200049.png\" alt=\"image-20221018232127422\"></p>\n<h4 id=\"3-完成后退到主页面点击右上角图标再点击setttings\"><a class=\"markdownIt-Anchor\" href=\"#3-完成后退到主页面点击右上角图标再点击setttings\">#</a> 3.。。。（完成后退到主页面，<strong>点击右上角图标，再点击 setttings</strong></h4>\n<p><img data-src=\"https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210191205796.png\" alt=\"image-20221018232328045\"></p>\n<h4 id=\"4在左下点击developer-settings\"><a class=\"markdownIt-Anchor\" href=\"#4在左下点击developer-settings\">#</a> 4.（在左下，点击 Developer settings）</h4>\n<p><img data-src=\"https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210191206029.png\" alt=\"image-20221018232406820\"></p>\n<h4 id=\"5点击左边的钥匙图标\"><a class=\"markdownIt-Anchor\" href=\"#5点击左边的钥匙图标\">#</a> 5.（点击左边的）<strong>钥匙图标</strong></h4>\n<p><img data-src=\"https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210191206711.png\" alt=\"image-20221018232458656\"></p>\n<h4 id=\"6再点击如图中\"><a class=\"markdownIt-Anchor\" href=\"#6再点击如图中\">#</a> 6.（再点击）（如图中）</h4>\n<p><img data-src=\"https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210191207636.png\" alt=\"image-20221018232518468\"></p>\n<h4 id=\"7\"><a class=\"markdownIt-Anchor\" href=\"#7\">#</a> 7.</h4>\n<p>1（输入 <u>picturebed</u>，或者其它名字，同样，不要使用中文和非字母字符）</p>\n<p>2（有效日期  ，看个人的情况。长期使用的话：<strong>点击下三角，选最后一个，即无限期</strong>）</p>\n<p>3.（<strong>勾选 repo，其它尽量不勾选</strong>，因为我也没勾过）</p>\n<p>4。（点击）</p>\n<p><img data-src=\"https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210191207835.png\" alt=\"image-20221018232550764\"></p>\n<h4 id=\"8生成后复制你的token一定要复制保存他只会显示这一次后续查找不到\"><a class=\"markdownIt-Anchor\" href=\"#8生成后复制你的token一定要复制保存他只会显示这一次后续查找不到\">#</a> 8.<strong> 生成后复制你的 token，一定要复制保存，他只会显示这一次，后续查找不到</strong></h4>\n<p><img data-src=\"https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210191207483.png\" alt=\"20200808103016720\"></p>\n<p>这样就基本完成了图床，token 之后会用到，请保存好。</p>\n<h3 id=\"bpicgo-配置\"><a class=\"markdownIt-Anchor\" href=\"#bpicgo-配置\">#</a> B.picgo 配置</h3>\n<h4 id=\"1请先下载-picgo链接如下releases-molunerfinnpicgo-githubcom\"><a class=\"markdownIt-Anchor\" href=\"#1请先下载-picgo链接如下releases-molunerfinnpicgo-githubcom\">#</a> 1. 请先下载  PicGo, 链接如下<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dvL3JlbGVhc2Vz\"> Releases・Molunerfinn/PicGo (github.com)</span></h4>\n<p>（版本要看个人的机型，不过建议下载最新版本。安装十分简单，所以     <u>我可不会指导你安装</u>）<strong>（– _–）@</strong></p>\n<h4 id=\"2安装好后打开在主界面点击1图床设置再点击2github进入设置\"><a class=\"markdownIt-Anchor\" href=\"#2安装好后打开在主界面点击1图床设置再点击2github进入设置\">#</a> 2. 安装好后打开，在主界面点击 1.<strong> 图床设置</strong>，再点击 2.<strong>GitHub</strong>，进入设置。</h4>\n<p><img data-src=\"https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210191207996.png\" alt=\"ca1ce17053217fbef132aff10928278e\"></p>\n<h4 id=\"3如下进行设置\"><a class=\"markdownIt-Anchor\" href=\"#3如下进行设置\">#</a> 3.<strong> 如下进行设置</strong></h4>\n<p>注意 1.（仓库名不能有空格和非法字符）2.（分支填 main）3.（token 是之前那个让你们复制或记下来的。如果你没有记，那你就寄了）// 其实网上有办法，不过我不在这里赘述 //</p>\n<ol start=\"3\">\n<li>\n<p>（在你的 GitHub 仓库里建一个文件夹，该文件夹用于存放你上传的图片）// 其实你不建也没什么关系，只不过会有点乱 //</p>\n</li>\n<li>\n<p>（这个自定义域名起一个加速的作用，你也可以不填）</p>\n</li>\n</ol>\n<p><img data-src=\"https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210191208259.png\" alt=\"202210182331532\"></p>\n<h4 id=\"4点击picdo设置然后\"><a class=\"markdownIt-Anchor\" href=\"#4点击picdo设置然后\">#</a> 4. 点击 picdo 设置，然后：</h4>\n<p><img data-src=\"https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210191208903.png\" alt=\"20200808103101714\"></p>\n<h4 id=\"5这样就基本完成了当然还有插件可供安装不过我就不做插件的介绍了-主要是我没用过这些插件\"><a class=\"markdownIt-Anchor\" href=\"#5这样就基本完成了当然还有插件可供安装不过我就不做插件的介绍了-主要是我没用过这些插件\">#</a> 5. 这样就基本完成了，当然还有插件可供安装，不过我就不做插件的介绍了。// 主要是我没用过这些插件 //</h4>\n<h3 id=\"ctypora的配置\"><a class=\"markdownIt-Anchor\" href=\"#ctypora的配置\">#</a> C.Typora 的配置</h3>\n<ul>\n<li>下载安装 Typora</li>\n<li>点击<u>左上角</u><strong>文件</strong>中偏好设置</li>\n<li>再点击<strong>图像</strong>进行 图片的设置</li>\n<li>再点击 验<strong>证图片上传项</strong>（如图显示就可以了）</li>\n</ul>\n<p>（1. 有必要的话，可以勾选 “<u>优先使用相对路径</u>” 2. 选择<strong> PicGo（app）</strong>，记得要找到你<strong>自己设备中 PicGo 应用程序</strong>的位置）</p>\n<p><img data-src=\"https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210191208950.png\" alt=\"202210182332333\"></p>\n<p><img data-src=\"https://tcwokor.oss-cn-chengdu.aliyuncs.com/img/202210191209437.png\" alt=\"20200808103115780\"></p>\n<h3 id=\"d希望你不会遇上明明picgo显示图片上传成功但是github仓库里却无法显示图片这种情况-反正我遇上了\"><a class=\"markdownIt-Anchor\" href=\"#d希望你不会遇上明明picgo显示图片上传成功但是github仓库里却无法显示图片这种情况-反正我遇上了\">#</a> D：希望你不会遇上明明 PicGo 显示图片上传成功，但是，GitHub 仓库里却无法显示图片这种情况 // 反正我遇上了 //</h3>\n<p>这时侯，你大概率仍然无法正常使用图床。至于解决办法。。。。。。</p>\n<p>我推荐几个博主的文章，大家自己考虑。</p>\n<p>1.<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JpbGFsXzAvYXJ0aWNsZS9kZXRhaWxzLzEyNjA3ODAxMz9vcHNfcmVxdWVzdF9taXNjPSZhbXA7cmVxdWVzdF9pZD0mYW1wO2Jpel9pZD0xMDImYW1wO3V0bV90ZXJtPVR5cG9yYStQaWNHbytHaXRIdWIlRTQlQjglOEElRTQlQkMlQTAlRTYlODglOTAlRTUlOEElOUYlRTQlQkQlODYlRTQlQjglOEQlRTYlOTglQkUlRTclQTQlQkEmYW1wO3V0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19zZWFyY2hfcmVzdWx0Lm5vbmUtdGFzay1ibG9nLTJ+YWxsfnNvYmFpZHV3ZWJ+ZGVmYXVsdC0wLTEyNjA3ODAxMy5ub25lY2FzZSZhbXA7c3BtPTEwMTguMjIyNi4zMDAxLjQxODc=\">Typora 图片上传成功后无法显示（Typora+Github + Picgo）_OMUQUK 的博客 - CSDN 博客</span></p>\n<p>2.<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODc0MzAwL2FydGljbGUvZGV0YWlscy8xMjA0MTIwNzM/b3BzX3JlcXVlc3RfbWlzYz0mYW1wO3JlcXVlc3RfaWQ9JmFtcDtiaXpfaWQ9MTAyJmFtcDt1dG1fdGVybT1UeXBvcmErUGljR28rR2l0SHViJUU0JUI4JThBJUU0JUJDJUEwJUU2JTg4JTkwJUU1JThBJTlGJUU0JUJEJTg2JUU0JUI4JThEJUU2JTk4JUJFJUU3JUE0JUJBJmFtcDt1dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfc2VhcmNoX3Jlc3VsdC5ub25lLXRhc2stYmxvZy0yfmFsbH5zb2JhaWR1d2VifmRlZmF1bHQtMS0xMjA0MTIwNzMubm9uZWNhc2UmYW1wO3NwbT0xMDE4LjIyMjYuMzAwMS40MTg3\">typora 配置图床（Typora + Picgo + github）+ 发生的错误问题_唯ě⒈が的博客 - CSDN 博客</span></p>\n<p>3.<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjAyNTM3MS9hcnRpY2xlL2RldGFpbHMvMTExMTA1MjY2P29wc19yZXF1ZXN0X21pc2M9JmFtcDtyZXF1ZXN0X2lkPSZhbXA7Yml6X2lkPTEwMiZhbXA7dXRtX3Rlcm09cGljZ28lRTYlOTglQkUlRTclQTQlQkElRTQlQjglOEElRTQlQkMlQTAlRTYlODglOTAlRTUlOEElOUYlRTQlQkQlODYlRTYlOTglQUYmYW1wO3V0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19zZWFyY2hfcmVzdWx0Lm5vbmUtdGFzay1ibG9nLTJ+YWxsfnNvYmFpZHV3ZWJ+ZGVmYXVsdC0xLTExMTEwNTI2Ni5ub25lY2FzZSZhbXA7c3BtPTEwMTguMjIyNi4zMDAxLjQxODc=\">Typora+PicGo+GitHub 实现图片上传及可能碰到的问题_- 雾里 - 的博客 - CSDN 博客</span></p>\n<p>（本文部分素材来源互联网）</p>\n",
            "tags": [
                "图床",
                "Typroa"
            ]
        },
        {
            "id": "http://example.com/2022/10/12/csapp%E7%AC%ACll%E7%AB%A0/",
            "url": "http://example.com/2022/10/12/csapp%E7%AC%ACll%E7%AB%A0/",
            "title": "csapp第二章",
            "date_published": "2022-10-12T11:07:35.000Z",
            "content_html": "<h1 id=\"csapp第二章可能没什么帮助就随便看看吧\"><a class=\"markdownIt-Anchor\" href=\"#csapp第二章可能没什么帮助就随便看看吧\">#</a> csapp 第二章（可能没什么帮助，就随便看看吧）</h1>\n<p>（现代计算机以二进制存储信息。相较于十进制，它能更好的适配计算机，能够更可靠的进行信息的表示、存储传输；用不同的位组合来表示元素；三种重要的数字编码：<u>无符号编码</u>，<u>二进制补码</u>，<u>浮点数编码</u>；）</p>\n<h1 id=\"21信息存储\"><a class=\"markdownIt-Anchor\" href=\"#21信息存储\">#</a> 2.1 信息存储</h1>\n<p>1. 字节（byte）是<strong> 8 位</strong>的块，<u>作为最小的可寻址的存储器单位</u>&lt;而不是单独的位&gt;.</p>\n<p>2. 存储器中每个字节由一个惟一的数字标识，这称之为他的<u>地址</u>。</p>\n<p>3. 所有可能地址的集合，称为<u>虚拟地址空间</u>。&lt;像一个分好类别的仓库吧？&gt;</p>\n<p>4. 编译和运行时，系统将存储空间划分为更可管理的单元，来存放不同程序对象（程序数据、指令和控制信息）。&lt;分类存放，便于之后的管理与取用&gt;</p>\n<h2 id=\"211十六进制表示法\"><a class=\"markdownIt-Anchor\" href=\"#211十六进制表示法\">#</a> 2.1.1 十六进制表示法</h2>\n<p>因为二进制表示太冗长，而十进制与位模式的互相转化很麻烦，两种符号表示法都比较麻烦。所以采取 16 进制来书写位模式。编写机械级程序常常需要手工地进行十、二、十六之间的转换。<u>需要掌握进制之间的转化方法</u>。</p>\n<h2 id=\"212-字\"><a class=\"markdownIt-Anchor\" href=\"#212-字\">#</a> 2.1.2 字</h2>\n<p>每台计算机都有一个字长（world size），指明整数和指针数据的标称大小（normal size）。<strong>字长 决定虚拟地址的最大大小</strong>。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxNDAyNDc1L2FydGljbGUvZGV0YWlscy8xMjQ4MDk5MjE=\">字长是什么</span></p>\n<h2 id=\"213-数据大小\"><a class=\"markdownIt-Anchor\" href=\"#213-数据大小\">#</a> 2.1.3 数据大小</h2>\n<p>计算机和编译器用不同方式来编码数字，如不同长度的整数和浮点数，从而支持多种数字格式。（程序员应该提高他们编写程序的可移植性，就是说，使得程序对不同数据类型的准确大小不敏感）&lt;就是可以在其他设备，其他系统上运行？&gt;</p>\n<h2 id=\"214寻址和字节顺序\"><a class=\"markdownIt-Anchor\" href=\"#214寻址和字节顺序\">#</a> 2.14 寻址和字节顺序</h2>\n<p>对于跨越多字节的程序对象，要建立两个规则：1. 对象地址是什么；2. 在存储器中如何对这些字节排序。几乎所有机器，<u>多字节对象都被存储为连续的字节序列，对象的地址为<strong>所使用字节序列中的最小地址</strong>。</u>（越小越精确，要找到对象的精确地址？）</p>\n<h2 id=\"215-表示字符串\"><a class=\"markdownIt-Anchor\" href=\"#215-表示字符串\">#</a> 2.15 表示字符串</h2>\n<p>字符串被编码为一个<strong>以 null（其值）字符结尾</strong>的字符数组。每个字符由标准码表示，常用 ASCII 字符码。（<u>文本数据比二进制数据具有更强的平台独立性</u>）&lt;不是特别理解・-・&gt;</p>\n<h2 id=\"216-表示代码\"><a class=\"markdownIt-Anchor\" href=\"#216-表示代码\">#</a> 2.1.6 表示代码</h2>\n<p>多数情况下，<u>不同机器类型使用不同且不兼容的指令和编码方式。</u>二进制代码很少能在不同机器和操作系统组合之间移植。</p>\n<h2 id=\"217-布尔代数和环\"><a class=\"markdownIt-Anchor\" href=\"#217-布尔代数和环\">#</a> 2.1.7 布尔代数和环</h2>\n<p>因为二进制是计算机编码、存储和操作信息的核心，所以围绕数值 0 和 1 已经演化出了丰富的数学知识体系。（I compeletly don’t understand what it wants telling me）</p>\n<h2 id=\"218-c中的位级运算\"><a class=\"markdownIt-Anchor\" href=\"#218-c中的位级运算\">#</a> 2.1.8  C 中的位级运算</h2>\n<p>C 的一个很有用的特性就是它是支持按位布尔运算，在布尔运算中使用的那些符号就是在 C 中使用的。（<u>确定一个位级表达式的结果的最好的方法就是将十六进制参数扩展成他们的二进制表示，执行二进制运算，然后再转换为十六进制。&lt;/u）</p>\n<h2 id=\"219-c中的逻辑运算\"><a class=\"markdownIt-Anchor\" href=\"#219-c中的逻辑运算\">#</a> 2.1.9   C 中的逻辑运算</h2>\n<p 逻辑运算认为所有非零参数都表示true，而参数零表示false=\"\">C 中提供了一系列的逻辑运算符，但逻辑运算容易与位级运算相混淆，而他们的功能又是完全不同的。</p>\n<h2 id=\"2110-c中的移位运算\"><a class=\"markdownIt-Anchor\" href=\"#2110-c中的移位运算\">#</a> 2.1.10  C 中的移位运算</h2>\n<p>C 提供了一系列的移位运算，有向左或向右移位模式。（移动后要用 0 进行补位）</p>\n<h1 id=\"22-整数表示\"><a class=\"markdownIt-Anchor\" href=\"#22-整数表示\">#</a> 2.2 整数表示</h1>\n<h2 id=\"221整型数据类型\"><a class=\"markdownIt-Anchor\" href=\"#221整型数据类型\">#</a> 2.2.1 整型数据类型</h2>\n<p>C 支持多种整型数据类型 —— 表示有限范围的整数。如 char、short、int、、long。C 标准定义了每种数据类型必须能够表示的最小值范围。具体而言，数据类型的取值会有差异。</p>\n<h2 id=\"222无符号和二进制补码编码\"><a class=\"markdownIt-Anchor\" href=\"#222无符号和二进制补码编码\">#</a> 2.2.2 无符号和二进制补码编码</h2>\n<ul>\n<li>二进制的补码范围是不对称的，容易产生错误。</li>\n<li>最大无符号值刚好比二进制补码的最大值的两倍大一（1）点。</li>\n<li>尽管 C 的标准没有要求用二进制补码形式来表示有符号整数，但几乎所有机器都是这么的。</li>\n<li>对有符号数，其最高有效位也称为符号位（sign bit），0 为正，1 为负。</li>\n</ul>\n<h2 id=\"223有符号数和无符号数之间的转换\"><a class=\"markdownIt-Anchor\" href=\"#223有符号数和无符号数之间的转换\">#</a> 2.2.3 有符号数和无符号数之间的转换</h2>\n<p>依托两者之间的映射关系进行转换，具体方法如有需要：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aGlkYW8uYmFpZHUuY29tL3F1ZXN0aW9uLzUxMjk3MjAwLmh0bWw=\">有符号数如何与无符号数转换</span>                    &lt;用 ctrl + 点击&gt;</p>\n<h2 id=\"224-c中的有符号与无符号数\"><a class=\"markdownIt-Anchor\" href=\"#224-c中的有符号与无符号数\">#</a> 2.2.4 C 中的有符号与无符号数</h2>\n<p>C 支持所有整数数据类型的有符号与无符号运算。尽管 C 标准没有指定某种有符号数的表示，但几乎所有机器都使用二进制补码。通常，大多数数字都是默认有符号的。（另外，当一种类型的表达式被赋值给另一种类型的变量时，转换是隐式发生的）</p>\n<p>当执行一个运算时，如果它的一个运算数是有符号而另一个是无符号，那么 C 将有符号参数类型转换为无符号数，并假设两数非负，并执行。（于一些情况下会导致运算错误）</p>\n<h2 id=\"225扩展一个数字的位表示\"><a class=\"markdownIt-Anchor\" href=\"#225扩展一个数字的位表示\">#</a> 2.2.5 扩展一个数字的位表示</h2>\n<p>一个常见的运算是在不同字长的整数之间转换，同时保持数值不变。而当目标类型太小了，则转换可能失效，但从较小到较大，应该总可能的。（*<em> 将一个无符号数转换为一个更大的数据类型，只要简单的在表示的开头添加 0，这种运算被称为零扩展（zero extension）；要将一个二进制补码数字转换俄日一个更大的数据类型，规则是执行一个符号扩展（sign extension），在表示中添加最高有效位的值）。</em></p>\n<p>从一个数据大小到另一个数据大小，以及<u>无符号和有符号数字之间的转换的相对顺序</u>能够影响一个程序的行为。</p>\n<h2 id=\"226-截断数字\"><a class=\"markdownIt-Anchor\" href=\"#226-截断数字\">#</a> 2.2.6 截断数字</h2>\n<p>详见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpcGFucGFuOTAwNzIxL2FydGljbGUvZGV0YWlscy8xMjA4MDQ0MTc=\">截断数字</span></p>\n<h2 id=\"227有符号数和无符号数的建议\"><a class=\"markdownIt-Anchor\" href=\"#227有符号数和无符号数的建议\">#</a> 2.2.7 有符号数和无符号数的建议</h2>\n<p>1. 尽量不要在你的代码中使用无符号数，以免增加不必需要的复杂性。</p>\n<p>2. 尽量使用像 int 那样的有符号类型，这样在涉及升级混合类型的复杂细节时，不必担心边界情况。</p>\n<p>3. 只有在使用位段和二进制掩码时，才可以用无符号数。应该在表达式中使用强制类型转换，使操作数均为有符号或无符号数，这样就不必由编译器来选择结果的类型。</p>\n<h1 id=\"23-整数运算\"><a class=\"markdownIt-Anchor\" href=\"#23-整数运算\">#</a> 2.3 整数运算</h1>\n<h2 id=\"231无符号加法\"><a class=\"markdownIt-Anchor\" href=\"#231无符号加法\">#</a> 2.3.1 无符号加法</h2>\n<ul>\n<li>要想完整地表示运算结果，不能对字长做任何限制。</li>\n<li>常见的编程语言支持固定精度的运算，因此 “加法” 和 “乘法” 这样的运算不同于它们在整数上的相应运算。</li>\n<li>无符号运算可视作一种形式的模运算。</li>\n<li><u><strong>算术运算溢出</strong></u>，是指完整的整数结果不能放到数据类型的字长限制中。（<u>执行 C 程序时，不会将溢出作为错误而发出信号</u>）</li>\n</ul>\n<h2 id=\"232二进制补码加法\"><a class=\"markdownIt-Anchor\" href=\"#232二进制补码加法\">#</a> 2.3.2 二进制补码加法</h2>\n<p>与无符号加法有相似之处，详见导引。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1p3bl8yMjMvYXJ0aWNsZS9kZXRhaWxzLzEyMDE2ODc5OA==\">1 号导引</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhhbmdzaGlsb25nLmNuL3dvcmsvMjYwNTk1Lmh0bWw=\">2 号导引</span></p>\n<h2 id=\"233-二进制补码的非\"><a class=\"markdownIt-Anchor\" href=\"#233-二进制补码的非\">#</a> 2.3.3 二进制补码的非</h2>\n<p>一种有名的用来执行位级二进制补码的非（negation）的 技术是对每个位取反（或取补），然后将结果加一。（以后还请回看 csapp   &gt;_&lt;）</p>\n<h2 id=\"234无符号乘法\"><a class=\"markdownIt-Anchor\" href=\"#234无符号乘法\">#</a> 2.3.4 无符号乘法</h2>\n<ol>\n<li>\n<p>0*0=0</p>\n</li>\n<li>\n<p>0*1=0</p>\n</li>\n<li>\n<p>1*0=0</p>\n</li>\n<li>\n<p>1*1=1</p>\n<p>二进制乘法相似于十进制乘法。</p>\n</li>\n</ol>\n<h2 id=\"235二进制补码乘法\"><a class=\"markdownIt-Anchor\" href=\"#235二进制补码乘法\">#</a> 2.3.5 二进制补码乘法</h2>\n<ul>\n<li>补码 * 补码 = 补码（什么哦 *^*）</li>\n<li>1、无符号数 * 无符号数 = 无符号数<br>\n 2、无符号数 * 有符号数 = 有符号数<br>\n 3、有符号数 * 无符号数 = 有符号数<br>\n 4、有符号数 * 有符号数 = 有符号数</li>\n</ul>\n<h2 id=\"236与237-乘除2的幂\"><a class=\"markdownIt-Anchor\" href=\"#236与237-乘除2的幂\">#</a> 2.3.6 与 2.3.7  乘除 2 的幂</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B1bXBpL2FydGljbGUvZGV0YWlscy8xMDQ0OTc1Mjk=\">计算 2 的幂的解方法</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZ2RqZHNqaC9wLzUwMzc2NzMuaHRtbCM6fjp0ZXh0PSVFNSU5QyVBOCVFNSVBNCVBNyVFNSVBNCU5QSVFNiU5NSVCMCVFNyU5QSU4NCVFNiU5QyVCQSVFNSU5OSVBOCVFNCVCOCVBRCVFRiVCQyU4QyVFOSU5OSVBNCVFNiVCMyU5NSVFOCVBNiU4MSVFNiVBRiU5NCVFNCVCOSU5OCVFNiVCMyU5NSVFOCVCRiU5OCVFNiU5QyU4OSVFNSU4QSVBMCVFNiVCMyU5NSVFOCVCRiU5OSVFNCVCQSU5Qg==\">具体解释 1</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDQ0NjI1Mi9hcnRpY2xlL2RldGFpbHMvMTA5MzgwMDEx\">通过位运算来进行 2 的幂运算</span></li>\n</ul>\n<h1 id=\"24浮点\"><a class=\"markdownIt-Anchor\" href=\"#24浮点\">#</a> 2.4 浮点</h1>\n<p>用于精确的计算，提高运算精度。</p>\n<h2 id=\"241-二进制小数\"><a class=\"markdownIt-Anchor\" href=\"#241-二进制小数\">#</a> 2.4.1  二进制小数</h2>\n<ul>\n<li>\n<p><strong>与十进制类似，用科学计数法表示（以 2 作指数底数）。</strong></p>\n</li>\n<li>\n<p><strong>分为整数与小数两个部分，常常要在运算中分离处理</strong></p>\n</li>\n<li>\n<p><strong>二进制小数末尾添上 0 或去掉 0，小数的大小也不变，但是意义不一样。</strong></p>\n</li>\n<li>\n<p><strong>正二进制整数或小数的开头添上 0 或去掉 0，数的大小不变。负二进制整数或小数的开头添上 1 或去掉 1，数的大小也不变。</strong></p>\n</li>\n</ul>\n<h2 id=\"242-ieee浮点表示\"><a class=\"markdownIt-Anchor\" href=\"#242-ieee浮点表示\">#</a> 2.4.2  IEEE 浮点表示</h2>\n<p>IEEE 标准 754 规定了三种浮点数格式：单精度、双精度、扩展精度。前两者正好对应 C 语言里头的 float、double 或者 FORTRAN 里头的 real、double 精度类型。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3OTMwNC9hcnRpY2xlL2RldGFpbHMvMTA4MDQ0NzU0\">详见</span></p>\n<h2 id=\"243-数值示例\"><a class=\"markdownIt-Anchor\" href=\"#243-数值示例\">#</a> 2.4.3 数值示例</h2>\n<p>来日方长：详见 csapp  p87</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/TCworkor/images/img/202210171328815.png\" alt=\"截图20221002221650\"></p>\n<h2 id=\"244舍入\"><a class=\"markdownIt-Anchor\" href=\"#244舍入\">#</a> 2.4.4 舍入</h2>\n<p>因为表示方法限制了浮点数的范围和精度，所以浮点运算只能近似表示实数运算。</p>\n<p>舍入运算，可以找到最接近的匹配值。（需要定义舍入方向）</p>\n<p>舍入会存在偏差，（向偶数舍入可以避免偏差）</p>\n<h2 id=\"245-浮点运算\"><a class=\"markdownIt-Anchor\" href=\"#245-浮点运算\">#</a> 2.4.5 浮点运算</h2>\n<ul>\n<li>\n<p>浮点数的加减运算分为 5 个步骤：对阶、尾数相加、尾数规格化、尾数舍入处理、溢出判断处理。</p>\n<h5 id=\"1-对阶所谓对阶就是让两个操作数阶数相同以便进行加减-实现的方式是对较小数的尾数进行右移操作-对阶的原则是向高阶看齐\"><a class=\"markdownIt-Anchor\" href=\"#1-对阶所谓对阶就是让两个操作数阶数相同以便进行加减-实现的方式是对较小数的尾数进行右移操作-对阶的原则是向高阶看齐\">#</a> 1. 对阶：所谓对阶，就是让两个操作数阶数相同，以便进行加减。实现的方式是对较小数的尾数进行右移操作。对阶的原则是向高阶看齐。</h5>\n<h5 id=\"2-尾数加减将两个操作数的尾数相加减-在ieee754标准中对于规格化数来说在小数点前有一位隐藏位1在加减过程中需要把它还原到尾数中-尾数加减的实质是原码的加减\"><a class=\"markdownIt-Anchor\" href=\"#2-尾数加减将两个操作数的尾数相加减-在ieee754标准中对于规格化数来说在小数点前有一位隐藏位1在加减过程中需要把它还原到尾数中-尾数加减的实质是原码的加减\">#</a> 2. 尾数加减：将两个操作数的尾数相加减。在 IEEE754 标准中，对于规格化数来说在小数点前有一位隐藏位 1，在加减过程中需要把它还原到尾数中。尾数加减的实质是原码的加减，</h5>\n<h5 id=\"3尾数规格化加减完成的尾数形式未必满足ieee754对于尾数的要求即保留23位小数点在第一个1之后-需要对尾数进行左规和右规下面介绍一下左规和右规-左规将尾数向左移用于清除第一个1前面出现的0-左规伴随着阶码减少在左规过程中要检测阶码是否发生下溢即阶码达到最小值0000-0000-右规将尾数向右移用于两数相加后出现向高位进位的情况-因为两数相加最多进一位所以右规最多一位-右规伴随着阶码的增加在右规过程中要检测阶码是否发生上溢即阶码达到最大值1111-1111\"><a class=\"markdownIt-Anchor\" href=\"#3尾数规格化加减完成的尾数形式未必满足ieee754对于尾数的要求即保留23位小数点在第一个1之后-需要对尾数进行左规和右规下面介绍一下左规和右规-左规将尾数向左移用于清除第一个1前面出现的0-左规伴随着阶码减少在左规过程中要检测阶码是否发生下溢即阶码达到最小值0000-0000-右规将尾数向右移用于两数相加后出现向高位进位的情况-因为两数相加最多进一位所以右规最多一位-右规伴随着阶码的增加在右规过程中要检测阶码是否发生上溢即阶码达到最大值1111-1111\">#</a> 3. 尾数规格化：加减完成的尾数形式未必满足 IEEE754 对于尾数的要求，即保留 23 位，小数点在第一个 1 之后。需要对尾数进行左规和右规，下面介绍一下左规和右规。左规：将尾数向左移，用于清除第一个 1 前面出现的 0。左规伴随着阶码减少，在左规过程中要检测阶码是否发生下溢，即阶码达到最小值（0000 0000）。右规：将尾数向右移，用于两数相加后出现向高位进位的情况。因为两数相加最多进一位，所以右规最多一位。右规伴随着阶码的增加，在右规过程中要检测阶码是否发生上溢，即阶码达到最大值（1111 1111）。</h5>\n<h5 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h5>\n<h5 id=\"5-溢出判断-在浮点数中是以阶码的溢出与否来作为评判标准的-单精度溢出分为上溢指数大于等于127和下溢指数小于等于-126\"><a class=\"markdownIt-Anchor\" href=\"#5-溢出判断-在浮点数中是以阶码的溢出与否来作为评判标准的-单精度溢出分为上溢指数大于等于127和下溢指数小于等于-126\">#</a> 5. 溢出判断：  在浮点数中是以阶码的溢出与否来作为评判标准的。单精度溢出分为上溢（指数大于等于 127）和下溢（指数小于等于 - 126)。</h5>\n</li>\n</ul>\n<p>详见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dsc19udWFhL2FydGljbGUvZGV0YWlscy8xMDU0MDEzNzI=\">详见</span></p>\n<h1 id=\"25-小结\"><a class=\"markdownIt-Anchor\" href=\"#25-小结\">#</a> 2.5 小结</h1>\n<p>虽然有很多不懂，但是就当作练习使用 typora 吧。以后回来看这些笔记怎么说也有帮助吧。（±+）</p>\n",
            "tags": [
                "csapp"
            ]
        },
        {
            "id": "http://example.com/2022/10/12/%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",
            "url": "http://example.com/2022/10/12/%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",
            "title": "开始使用Linux操作系统",
            "date_published": "2022-10-12T11:07:29.000Z",
            "content_html": "<h1 id=\"开始使用linux操作系统\"><a class=\"markdownIt-Anchor\" href=\"#开始使用linux操作系统\">#</a> 开始使用 Linux 操作系统</h1>\n<h2 id=\"2-1linux-目录结构与访问路径\"><a class=\"markdownIt-Anchor\" href=\"#2-1linux-目录结构与访问路径\">#</a> 2-1；Linux 目录结构与访问路径</h2>\n<h3 id=\"目录的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#目录的基本概念\">#</a> 目录的基本概念</h3>\n<p>目录是描述文件夹的专有名词。</p>\n<p>在计算机代码中，<u>文件夹形式与书本目录相同</u>。</p>\n<ul>\n<li>书本目录记录所有书的章节名和页码。</li>\n<li>计算机目录记录其中包含的文件和对应的访问地址。</li>\n<li>相对于普通文件，目录也称为目录文件。</li>\n</ul>\n<h3 id=\"linux文件系统是树形结构\"><a class=\"markdownIt-Anchor\" href=\"#linux文件系统是树形结构\">#</a> Linux 文件系统是树形结构</h3>\n<p>优点</p>\n<ul>\n<li><strong>层次结构鲜明</strong></li>\n<li><strong>易于扩展分支</strong></li>\n<li><strong>分支隔离互不依赖</strong></li>\n</ul>\n<p>Windows 系统每个盘符作为文件根节点（C 盘。D 盘）</p>\n<p>Linux 系统采用单根结构，整个文件系统只有一个根。</p>\n<h3 id=\"linux的根目录下有众多的二级目录如\"><a class=\"markdownIt-Anchor\" href=\"#linux的根目录下有众多的二级目录如\">#</a> Linux 的根目录（/）下有众多的二级目录，如</h3>\n<ul>\n<li>（/boot，存放 Linux 启动所需的内核文件和镜像文件）</li>\n<li>(/bin, 存放最常用的命令)</li>\n<li>（/dev，存放 Linux 的外部设备，且在 Linux 中访问设备的方式和访问文件相同）</li>\n<li>（/etc，存放所有系统管理所需要的配置文件和子目录）</li>\n<li>（/home，用户的主目录，属于用户）</li>\n<li>（/root，此目录为系统管理员，也称作超级管理员 root 用户的主目录）</li>\n</ul>\n<h3 id=\"访问路径\"><a class=\"markdownIt-Anchor\" href=\"#访问路径\">#</a> 访问路径</h3>\n<p><strong>绝对路径</strong>（文件或目录相对于根目录的可访问路径）</p>\n<p>形式特点：</p>\n<ol>\n<li>Windows：从盘符开始书写的路径。如：C：\\Linux</li>\n<li>Linux：从根目录（/）开始书写的路径。如：/home</li>\n</ol>\n<p>优缺：</p>\n<ul>\n<li>\n<p>具有<u>唯一性</u>，但是只能在<u>特定的操作系统环境</u>下才能准确定位目标路径。</p>\n</li>\n<li>\n<p><u>不适合编写脚本</u>。</p>\n</li>\n</ul>\n<p><strong>相对路径</strong>（文件或目录相对于当前目录的可访问路径）</p>\n<p>形式特点：</p>\n<p>1. 不是从根目录（/）开始书写的路径。如：etc。</p>\n<p>2. 一般从当前目录开始书写</p>\n<p>tips：</p>\n<p>用 “.” 表示本级目录；用 “…” 表示上级目录。</p>\n<p>优缺：</p>\n<ul>\n<li>同一个参考体系内，<u>相对路径不变</u>，适合编写脚本。</li>\n<li>计算较为<strong>复杂</strong>，需要掌握文件系统的目录结构。</li>\n</ul>\n<p>（归结而言一个是从根目录出发，一个是从其他的目录出发，但无论从什么地方出发，目的地是一样的，不过过程不同）</p>\n<h2 id=\"2-2定位和切换目录\"><a class=\"markdownIt-Anchor\" href=\"#2-2定位和切换目录\">#</a> 2-2 定位和切换目录</h2>\n<h3 id=\"定位当前目录确定当前工作目录的绝对路径\"><a class=\"markdownIt-Anchor\" href=\"#定位当前目录确定当前工作目录的绝对路径\">#</a> 定位当前目录（确定当前工作目录的绝对路径）</h3>\n<p><strong>命令</strong>：pwd（打印当前工作目录）</p>\n<p><strong>输出</strong>：当前所在工作目录的绝对路径</p>\n<p>（可用于相对路径的参考点）</p>\n<h3 id=\"切换工作目录前往新的工作目录\"><a class=\"markdownIt-Anchor\" href=\"#切换工作目录前往新的工作目录\">#</a> 切换工作目录（前往新的工作目录）</h3>\n<p><strong>命令</strong>：cd（cd+【空格】+ 目标的绝对路径或相对路径）</p>\n<p>tips：</p>\n<p>{./}  表示当前目录</p>\n<p>{…/} 上一级目录</p>\n<p>单走 {cd} 直接切换至用户家目录</p>\n<p>{cd + 空格 + 横线} 切换到上一个工作目录（上一次工作的目录）</p>\n<p>{cd + 空格 + 波浪线} 切换到用户家目录</p>\n<h2 id=\"2-3查看目录内容\"><a class=\"markdownIt-Anchor\" href=\"#2-3查看目录内容\">#</a> 2-3 查看目录内容</h2>\n<h3 id=\"ulinux命令基本范式u\"><a class=\"markdownIt-Anchor\" href=\"#ulinux命令基本范式u\">#</a> <u><strong>Linux 命令基本范式</strong></u></h3>\n<p>含（命令关键词，命令选项，命令参数）</p>\n<p><strong>范式</strong>：<strong>命令关键字   选项     命令参数</strong></p>\n<p>其中：</p>\n<p><strong>命令关键字</strong>：必不可少，指明要完成的具体操作</p>\n<p><strong>选项</strong>：可选，指定用什么方式来完成操作，一般有默认值。</p>\n<p><strong>命令参数</strong>：可选，指明操作对象</p>\n<h3 id=\"查看目录内容\"><a class=\"markdownIt-Anchor\" href=\"#查看目录内容\">#</a> 查看目录内容</h3>\n<p>含（查看指定目标内容，按指定格式查看目录内容，按指定格式查看指定目录内容）</p>\n<p><strong>命令</strong>：ls  【选项】 【目录路径】（分别对应 ，命令关键字，选项，命令参数）</p>\n<p><strong>其中选项</strong>：                                <u>注：（可以有多个选项内容，如：ls -l -a /  ； ls -al /）</u></p>\n<ul>\n<li>\n<p>l：长格式显示目录内容</p>\n</li>\n<li>\n<p>a：显示目录所有内容，包括隐藏文件</p>\n</li>\n<li>\n<p>无选项：仅显示非隐藏文件的名称</p>\n</li>\n</ul>\n<p><strong>其中目录路径</strong>：</p>\n<ul>\n<li>可以是绝对路径，也可为相对路径</li>\n<li>无参数：默认显示当前目录下的内容</li>\n</ul>\n<p>tips：</p>\n<p ls+空格+-l+空格+=\"\">{ll + 空格 +/}=</p>\n<p>ll    -d    /dev（查看 dev 目录的相关信息）</p>\n<p>ll     /dev（查看 dev 目录的内容）（注意空格）</p>\n<p>{ls + 空格 ±±+help}     查看命令的使用格式与方法。</p>\n<p>ll   查看当前目录内容</p>\n<h2 id=\"2-4创建目录和文件\"><a class=\"markdownIt-Anchor\" href=\"#2-4创建目录和文件\">#</a> 2-4 创建目录和文件</h2>\n<h3 id=\"u新建目录u含在指定位置新建目录在指定路径上新建所有目录同时新建多个目录\"><a class=\"markdownIt-Anchor\" href=\"#u新建目录u含在指定位置新建目录在指定路径上新建所有目录同时新建多个目录\">#</a> <u><strong>新建目录</strong></u>，含 (在指定位置新建目录，在指定路径上新建所有目录，同时新建多个目录)</h3>\n<p><strong>命令</strong>：mkdir  【选项】  【目录路径】</p>\n<p><strong>其中目录路径</strong>：</p>\n<ul>\n<li>可以是绝对路径，也可以为相对路径</li>\n<li>可以是多个参数，表示一次性创建多个目录</li>\n</ul>\n<p><strong>其中选项</strong>：</p>\n<ul>\n<li>p：若指定的路径上有不存在目录，一并创建‘</li>\n<li>无选项：仅创建指定路径上最后一个目标目录</li>\n</ul>\n<p>tips：</p>\n<p>mkdir   目录 1  ；表示新建目录 1</p>\n<p>mkdir    -p    目录 2 / 目录 3（此时会先在当前目录下创建目录 2，再在目录 2 下创建目录 3，，如果不使用 - p，则无法执行命令）</p>\n<h3 id=\"新建文件含touch命令echo命令输出重定向\"><a class=\"markdownIt-Anchor\" href=\"#新建文件含touch命令echo命令输出重定向\">#</a> 新建文件，含 (touch 命令，echo 命令输出重定向)</h3>\n<p><u>法 1：touch  【文件路径】</u></p>\n<p><strong>其中文件路径</strong>：</p>\n<ul>\n<li>可以是相对路径也可以是绝对路径</li>\n<li>可以是多个参数，表示一次性创建多个文件</li>\n</ul>\n<p><u>法 2：vi   【文件路径】</u></p>\n<p><strong>其中文件路径</strong>：</p>\n<ul>\n<li>可以是绝对路径，也可以是相对路径</li>\n<li>可以是已经存在的文件（可以该编辑文件）</li>\n<li>也可以是还未创建的文件（新建并编辑该文件）</li>\n</ul>\n<p><u>法 3：echo   内容信息     &gt;|&gt;&gt;    【文件路径】</u></p>\n<p><strong>输出重定向符</strong>：</p>\n<ul>\n<li>{&gt;}: 将命令的结果输出从显示器改到文件（覆盖）</li>\n<li>{&gt;&gt;}：将命令的结果输出从显示器改到文件（追加）</li>\n</ul>\n<p><strong>其中文件路径</strong>：</p>\n<ul>\n<li>可以是绝对路径，也可以是相对路径‘</li>\n<li>可以是已经存在的文件（编辑文件）</li>\n</ul>\n<p>tips：</p>\n<p>touch     文件 1   | 创建一个文件</p>\n<p>touch     文件 2     | 文件 3    ；创建多个文件</p>\n<p>vi     文件 1    |（因为已经存在，所以编辑文件）（会进入 vi 编辑器中，i 键 进入插入模式  ，Esc 键退回 vi 命令模式，输入   ：  符  ，进入 vi 底行模式 ，输入 wq 保存文件）</p>\n<p>cat   文件 1  | 查看文件内容</p>\n<p>cat    文件 4  | 文件不存在，则先创建再编辑</p>\n<p>echo “这是文件 5”      &gt;     文件 5</p>\n<p>echo “2002  3 2”   &gt;&gt;     文件 1（表示追加输入）</p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "http://example.com/2022/10/12/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8D%9A%E5%AE%A2/",
            "url": "http://example.com/2022/10/12/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8D%9A%E5%AE%A2/",
            "title": "我的第一次博客",
            "date_published": "2022-10-12T06:21:02.000Z",
            "content_html": "<p>a</p>\n<p>good</p>\n<p>start</p>\n",
            "tags": [
                "闲暇"
            ]
        },
        {
            "id": "http://example.com/2022/10/12/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8D%9A%E5%AE%A2%20-%201/",
            "url": "http://example.com/2022/10/12/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8D%9A%E5%AE%A2%20-%201/",
            "title": "我的第一次博客",
            "date_published": "2022-10-12T06:21:02.000Z",
            "content_html": "<p>我叫 chenlinhai，是 TCcompany 的员工</p>\n",
            "tags": [
                "闲暇"
            ]
        },
        {
            "id": "http://example.com/2022/10/12/pagetags/",
            "url": "http://example.com/2022/10/12/pagetags/",
            "title": "pagetags",
            "date_published": "2022-10-12T03:53:19.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://example.com/2022/10/12/hello-world/",
            "url": "http://example.com/2022/10/12/hello-world/",
            "title": "Hello World",
            "date_published": "2022-10-12T03:47:48.320Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        }
    ]
}